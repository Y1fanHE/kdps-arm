Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, step_limit=200, growth_cap=500, runtime_limit=10, collection_size_cap=1000))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fd2856114c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fd285611eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fd285611850>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd27cb18880>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd27cb18780>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fd285616e50>]
========================================
Start Run
========================================
2021-12-17 10:07:18.809002 | GENERATION: 1 | ERRORS: best=226, median=3169.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=69.71
2021-12-17 10:07:20.679610 | GENERATION: 2 | ERRORS: best=201, median=226.0, diversity=0.075 | INDIVIDUALS: n=200, avg_genome_length=65.975
2021-12-17 10:07:22.468137 | GENERATION: 3 | ERRORS: best=115, median=213.5, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=65.63
2021-12-17 10:07:24.954382 | GENERATION: 4 | ERRORS: best=96, median=213.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=70.01
2021-12-17 10:07:27.049313 | GENERATION: 5 | ERRORS: best=96, median=206.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=61.375
2021-12-17 10:07:29.027797 | GENERATION: 6 | ERRORS: best=95, median=185.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=58.235
2021-12-17 10:07:31.317478 | GENERATION: 7 | ERRORS: best=95, median=177.0, diversity=0.355 | INDIVIDUALS: n=200, avg_genome_length=57.415
2021-12-17 10:07:33.524801 | GENERATION: 8 | ERRORS: best=95, median=164.5, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=56.72
2021-12-17 10:07:35.709119 | GENERATION: 9 | ERRORS: best=95, median=142.0, diversity=0.41 | INDIVIDUALS: n=200, avg_genome_length=52.74
2021-12-17 10:07:37.825511 | GENERATION: 10 | ERRORS: best=95, median=146.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=52.76
2021-12-17 10:07:39.991140 | GENERATION: 11 | ERRORS: best=95, median=142.5, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=49.755
2021-12-17 10:07:42.296836 | GENERATION: 12 | ERRORS: best=90, median=148.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=46.76
2021-12-17 10:07:44.623610 | GENERATION: 13 | ERRORS: best=46, median=131.0, diversity=0.495 | INDIVIDUALS: n=200, avg_genome_length=42.565
2021-12-17 10:07:47.034766 | GENERATION: 14 | ERRORS: best=46, median=126.0, diversity=0.48 | INDIVIDUALS: n=200, avg_genome_length=36.33
2021-12-17 10:07:49.446970 | GENERATION: 15 | ERRORS: best=46, median=132.5, diversity=0.46 | INDIVIDUALS: n=200, avg_genome_length=34.055
2021-12-17 10:07:51.979096 | GENERATION: 16 | ERRORS: best=14, median=126.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=32.64
2021-12-17 10:07:54.132448 | GENERATION: 17 | ERRORS: best=14, median=127.0, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=37.36
2021-12-17 10:07:56.385911 | GENERATION: 18 | ERRORS: best=14, median=118.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=38.34
2021-12-17 10:07:58.700239 | GENERATION: 19 | ERRORS: best=14, median=126.0, diversity=0.44 | INDIVIDUALS: n=200, avg_genome_length=37.775
2021-12-17 10:08:01.019936 | GENERATION: 20 | ERRORS: best=14, median=126.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=37.1
2021-12-17 10:08:03.473455 | GENERATION: 21 | ERRORS: best=14, median=115.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=36.28
2021-12-17 10:08:05.566458 | GENERATION: 22 | ERRORS: best=14, median=126.0, diversity=0.52 | INDIVIDUALS: n=200, avg_genome_length=36.665
2021-12-17 10:08:07.659732 | GENERATION: 23 | ERRORS: best=14, median=121.0, diversity=0.435 | INDIVIDUALS: n=200, avg_genome_length=35.59
2021-12-17 10:08:09.824185 | GENERATION: 24 | ERRORS: best=14, median=121.5, diversity=0.48 | INDIVIDUALS: n=200, avg_genome_length=35.71
2021-12-17 10:08:12.022357 | GENERATION: 25 | ERRORS: best=14, median=126.0, diversity=0.455 | INDIVIDUALS: n=200, avg_genome_length=34.985
2021-12-17 10:08:14.201207 | GENERATION: 26 | ERRORS: best=14, median=115.0, diversity=0.38 | INDIVIDUALS: n=200, avg_genome_length=34.73
2021-12-17 10:08:16.282383 | GENERATION: 27 | ERRORS: best=14, median=126.0, diversity=0.425 | INDIVIDUALS: n=200, avg_genome_length=35.06
2021-12-17 10:08:18.425651 | GENERATION: 28 | ERRORS: best=14, median=115.0, diversity=0.455 | INDIVIDUALS: n=200, avg_genome_length=34.245
2021-12-17 10:08:20.457072 | GENERATION: 29 | ERRORS: best=14, median=115.0, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=33.41
Simplifying genome of length 27 with total error 0.
Simplified genome by 3 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=1), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_sub', code_blocks=0), InstructionMeta(name='int_shove', code_blocks=0), Input(input_index=2), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_1 input_0 input_1 int_sub int_shove input_2 int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:19

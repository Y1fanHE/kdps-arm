Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, runtime_limit=10, collection_size_cap=1000, growth_cap=500, step_limit=200), arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7ff1d4cea6a0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7ff1dc39bbb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7ff1d4cea730>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7ff1d562ec00>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7ff1d562e9c0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7ff1dc3a1a60>]
========================================
Start Run
========================================
2021-12-14 22:49:50.163427 | GENERATION: 1 | ERRORS: best=235, median=400.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=65.815
2021-12-14 22:49:54.385616 | GENERATION: 2 | ERRORS: best=91, median=235.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=67.595
2021-12-14 22:49:58.277213 | GENERATION: 3 | ERRORS: best=91, median=91.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=55.97
2021-12-14 22:50:02.272091 | GENERATION: 4 | ERRORS: best=91, median=108.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=53.91
2021-12-14 22:50:06.137147 | GENERATION: 5 | ERRORS: best=91, median=118.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=52.735
2021-12-14 22:50:10.088954 | GENERATION: 6 | ERRORS: best=91, median=118.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=51.36
2021-12-14 22:50:14.112284 | GENERATION: 7 | ERRORS: best=91, median=118.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=50.38
2021-12-14 22:50:17.534998 | GENERATION: 8 | ERRORS: best=91, median=111.5, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=49.655
2021-12-14 22:50:20.850958 | GENERATION: 9 | ERRORS: best=91, median=118.0, diversity=0.305 | INDIVIDUALS: n=200, avg_genome_length=44.88
2021-12-14 22:50:24.142109 | GENERATION: 10 | ERRORS: best=55, median=118.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=42.595
2021-12-14 22:50:27.396380 | GENERATION: 11 | ERRORS: best=55, median=118.0, diversity=0.395 | INDIVIDUALS: n=200, avg_genome_length=43.07
2021-12-14 22:50:30.760663 | GENERATION: 12 | ERRORS: best=55, median=113.5, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=41.825
2021-12-14 22:50:34.160275 | GENERATION: 13 | ERRORS: best=55, median=118.0, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=41.155
2021-12-14 22:50:37.557352 | GENERATION: 14 | ERRORS: best=39, median=118.0, diversity=0.425 | INDIVIDUALS: n=200, avg_genome_length=40.32
2021-12-14 22:50:41.894837 | GENERATION: 15 | ERRORS: best=39, median=153.5, diversity=0.495 | INDIVIDUALS: n=200, avg_genome_length=44.635
2021-12-14 22:50:46.244290 | GENERATION: 16 | ERRORS: best=39, median=128.0, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=44.025
2021-12-14 22:50:50.283968 | GENERATION: 17 | ERRORS: best=36, median=158.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=44.775
2021-12-14 22:50:54.183759 | GENERATION: 18 | ERRORS: best=36, median=118.0, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=42.855
2021-12-14 22:50:57.861470 | GENERATION: 19 | ERRORS: best=36, median=117.0, diversity=0.48 | INDIVIDUALS: n=200, avg_genome_length=42.465
2021-12-14 22:51:01.216539 | GENERATION: 20 | ERRORS: best=30, median=110.0, diversity=0.54 | INDIVIDUALS: n=200, avg_genome_length=39.875
2021-12-14 22:51:04.565344 | GENERATION: 21 | ERRORS: best=15, median=108.5, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=38.68
Simplifying genome of length 38 with total error 0.
Simplified genome by 2 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 2 to length 33.
Simplified genome by 3 to length 30.
Simplified genome by 3 to length 27.
Simplified genome by 3 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 3 to length 19.
Simplified genome by 2 to length 17.
Simplified genome by 2 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=1), Input(input_index=2), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=0), Input(input_index=2), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_1 input_2 int_max input_0 input_2 input_1 int_min int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:39

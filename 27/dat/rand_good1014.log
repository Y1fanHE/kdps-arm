Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(collection_size_cap=1000, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, growth_cap=500, step_limit=200), output_stacks=['stdout'], arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fda781897f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fda7f87cf40>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fda781890a0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fda7f896840>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fda7f8966c0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fda7f881a60>]
========================================
Start Run
========================================
2021-12-15 04:30:38.328641 | GENERATION: 1 | ERRORS: best=220, median=322.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=57.935
2021-12-15 04:30:42.322774 | GENERATION: 2 | ERRORS: best=124, median=240.0, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=46.435
2021-12-15 04:30:48.816756 | GENERATION: 3 | ERRORS: best=97, median=226.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=44.9
2021-12-15 04:30:54.203689 | GENERATION: 4 | ERRORS: best=97, median=195.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=43.695
2021-12-15 04:30:58.567907 | GENERATION: 5 | ERRORS: best=97, median=226.0, diversity=0.355 | INDIVIDUALS: n=200, avg_genome_length=43.28
2021-12-15 04:31:03.554250 | GENERATION: 6 | ERRORS: best=97, median=124.0, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=41.935
2021-12-15 04:31:08.213592 | GENERATION: 7 | ERRORS: best=97, median=124.0, diversity=0.33 | INDIVIDUALS: n=200, avg_genome_length=40.365
2021-12-15 04:31:12.507144 | GENERATION: 8 | ERRORS: best=97, median=124.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=39.035
2021-12-15 04:31:17.348206 | GENERATION: 9 | ERRORS: best=97, median=124.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=36.895
2021-12-15 04:31:21.696264 | GENERATION: 10 | ERRORS: best=97, median=124.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=36.575
2021-12-15 04:31:26.332624 | GENERATION: 11 | ERRORS: best=97, median=124.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=35.18
2021-12-15 04:31:30.468304 | GENERATION: 12 | ERRORS: best=97, median=130.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=34.045
2021-12-15 04:31:34.643957 | GENERATION: 13 | ERRORS: best=97, median=130.0, diversity=0.37 | INDIVIDUALS: n=200, avg_genome_length=33.29
2021-12-15 04:31:38.021547 | GENERATION: 14 | ERRORS: best=95, median=145.5, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=33.875
2021-12-15 04:31:41.190668 | GENERATION: 15 | ERRORS: best=95, median=137.0, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=31.87
2021-12-15 04:31:44.520412 | GENERATION: 16 | ERRORS: best=95, median=124.0, diversity=0.33 | INDIVIDUALS: n=200, avg_genome_length=30.505
2021-12-15 04:31:47.433184 | GENERATION: 17 | ERRORS: best=94, median=117.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=30.715
2021-12-15 04:31:50.457213 | GENERATION: 18 | ERRORS: best=94, median=124.0, diversity=0.355 | INDIVIDUALS: n=200, avg_genome_length=28.635
2021-12-15 04:31:53.334682 | GENERATION: 19 | ERRORS: best=94, median=124.0, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=28.75
2021-12-15 04:31:56.178479 | GENERATION: 20 | ERRORS: best=93, median=121.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=26.175
2021-12-15 04:32:00.396223 | GENERATION: 21 | ERRORS: best=61, median=115.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=24.62
2021-12-15 04:32:04.664375 | GENERATION: 22 | ERRORS: best=55, median=115.0, diversity=0.395 | INDIVIDUALS: n=200, avg_genome_length=25.755
Simplifying genome of length 27 with total error 0.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 2 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 2 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_2 input_0 input_1 int_max int_min input_0 input_1 int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:49

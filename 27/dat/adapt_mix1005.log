Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(step_limit=200, collection_size_cap=1000, numeric_magnitude_limit=1000000000000.0, runtime_limit=10, growth_cap=500))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fa3faf9f0d0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fa404176f40>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fa3faf9f0a0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa404188f40>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa4041a3300>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fa40417ca60>]
========================================
Start Run
========================================
2021-12-14 22:42:22.080724 | GENERATION: 1 | ERRORS: best=152, median=400.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=48.62
2021-12-14 22:42:26.173226 | GENERATION: 2 | ERRORS: best=87, median=201.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=58.715
2021-12-14 22:42:30.151555 | GENERATION: 3 | ERRORS: best=87, median=181.5, diversity=0.445 | INDIVIDUALS: n=200, avg_genome_length=63.935
2021-12-14 22:42:34.098202 | GENERATION: 4 | ERRORS: best=87, median=183.0, diversity=0.58 | INDIVIDUALS: n=200, avg_genome_length=63.885
2021-12-14 22:42:37.874952 | GENERATION: 5 | ERRORS: best=84, median=134.0, diversity=0.535 | INDIVIDUALS: n=200, avg_genome_length=63.0
2021-12-14 22:42:41.705579 | GENERATION: 6 | ERRORS: best=81, median=124.0, diversity=0.555 | INDIVIDUALS: n=200, avg_genome_length=64.465
2021-12-14 22:42:45.490432 | GENERATION: 7 | ERRORS: best=74, median=114.0, diversity=0.56 | INDIVIDUALS: n=200, avg_genome_length=65.085
2021-12-14 22:42:49.335489 | GENERATION: 8 | ERRORS: best=71, median=114.0, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=65.445
2021-12-14 22:42:53.196328 | GENERATION: 9 | ERRORS: best=61, median=126.5, diversity=0.625 | INDIVIDUALS: n=200, avg_genome_length=65.12
2021-12-14 22:42:57.262709 | GENERATION: 10 | ERRORS: best=61, median=126.5, diversity=0.715 | INDIVIDUALS: n=200, avg_genome_length=65.55
2021-12-14 22:43:01.409159 | GENERATION: 11 | ERRORS: best=61, median=115.5, diversity=0.705 | INDIVIDUALS: n=200, avg_genome_length=65.65
2021-12-14 22:43:05.445251 | GENERATION: 12 | ERRORS: best=53, median=143.0, diversity=0.705 | INDIVIDUALS: n=200, avg_genome_length=66.04
2021-12-14 22:43:09.704049 | GENERATION: 13 | ERRORS: best=52, median=124.5, diversity=0.745 | INDIVIDUALS: n=200, avg_genome_length=66.5
2021-12-14 22:43:14.032995 | GENERATION: 14 | ERRORS: best=35, median=122.0, diversity=0.79 | INDIVIDUALS: n=200, avg_genome_length=66.2
2021-12-14 22:43:18.682902 | GENERATION: 15 | ERRORS: best=33, median=104.0, diversity=0.775 | INDIVIDUALS: n=200, avg_genome_length=64.87
2021-12-14 22:43:22.978406 | GENERATION: 16 | ERRORS: best=33, median=106.0, diversity=0.735 | INDIVIDUALS: n=200, avg_genome_length=64.685
2021-12-14 22:43:27.479489 | GENERATION: 17 | ERRORS: best=27, median=113.0, diversity=0.76 | INDIVIDUALS: n=200, avg_genome_length=64.715
2021-12-14 22:43:31.957446 | GENERATION: 18 | ERRORS: best=27, median=103.5, diversity=0.675 | INDIVIDUALS: n=200, avg_genome_length=60.885
2021-12-14 22:43:36.405974 | GENERATION: 19 | ERRORS: best=27, median=113.5, diversity=0.7 | INDIVIDUALS: n=200, avg_genome_length=60.885
2021-12-14 22:43:41.062776 | GENERATION: 20 | ERRORS: best=27, median=119.0, diversity=0.725 | INDIVIDUALS: n=200, avg_genome_length=60.87
2021-12-14 22:43:45.205733 | GENERATION: 21 | ERRORS: best=27, median=112.0, diversity=0.72 | INDIVIDUALS: n=200, avg_genome_length=58.215
Simplifying genome of length 54 with total error 0.
Simplified genome by 2 to length 52.
Simplified genome by 2 to length 50.
Simplified genome by 3 to length 47.
Simplified genome by 2 to length 45.
Simplified genome by 2 to length 43.
Simplified genome by 1 to length 42.
Simplified genome by 2 to length 40.
Simplified genome by 3 to length 37.
Simplified genome by 2 to length 35.
Simplified genome by 2 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 3 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 2 to length 14.
Simplified genome by 2 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=1), Input(input_index=2), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=0), Input(input_index=1), Input(input_index=2), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_1 input_2 int_min input_0 input_1 input_2 int_max int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:49

Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, growth_cap=500, collection_size_cap=1000, runtime_limit=10, step_limit=200))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f9d26a11040>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f9d2e0c1f40>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f9d26a110a0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9d2e0e1b80>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9d2e0e19c0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f9d2e0c6a60>]
========================================
Start Run
========================================
2021-12-15 05:56:54.631037 | GENERATION: 1 | ERRORS: best=179, median=600.0, diversity=0.085 | INDIVIDUALS: n=200, avg_genome_length=60.12
2021-12-15 05:56:56.423578 | GENERATION: 2 | ERRORS: best=92, median=230.5, diversity=0.1 | INDIVIDUALS: n=200, avg_genome_length=22.79
2021-12-15 05:56:59.284162 | GENERATION: 3 | ERRORS: best=91, median=133.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=20.925
2021-12-15 05:57:02.046044 | GENERATION: 4 | ERRORS: best=89, median=139.5, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=20.145
2021-12-15 05:57:04.155076 | GENERATION: 5 | ERRORS: best=36, median=125.0, diversity=0.39 | INDIVIDUALS: n=200, avg_genome_length=19.555
2021-12-15 05:57:05.774980 | GENERATION: 6 | ERRORS: best=36, median=124.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=18.26
2021-12-15 05:57:07.294354 | GENERATION: 7 | ERRORS: best=36, median=121.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=17.16
2021-12-15 05:57:08.933290 | GENERATION: 8 | ERRORS: best=35, median=124.5, diversity=0.33 | INDIVIDUALS: n=200, avg_genome_length=17.13
2021-12-15 05:57:10.559280 | GENERATION: 9 | ERRORS: best=35, median=124.0, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=16.84
2021-12-15 05:57:12.229623 | GENERATION: 10 | ERRORS: best=35, median=120.5, diversity=0.33 | INDIVIDUALS: n=200, avg_genome_length=16.855
2021-12-15 05:57:14.165266 | GENERATION: 11 | ERRORS: best=35, median=120.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=16.88
2021-12-15 05:57:15.795450 | GENERATION: 12 | ERRORS: best=21, median=116.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=16.68
2021-12-15 05:57:17.393410 | GENERATION: 13 | ERRORS: best=21, median=116.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=16.745
2021-12-15 05:57:19.034457 | GENERATION: 14 | ERRORS: best=21, median=121.0, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=15.835
2021-12-15 05:57:20.700789 | GENERATION: 15 | ERRORS: best=21, median=125.0, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=16.6
2021-12-15 05:57:22.366857 | GENERATION: 16 | ERRORS: best=21, median=125.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=16.72
Simplifying genome of length 18 with total error 0.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 2 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_1 int_max input_2 input_0 input_1 int_min int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:48

Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, push_config=PushConfig(collection_size_cap=1000, step_limit=200, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, growth_cap=500), output_stacks=['stdout'])
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fd9a6cf24c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fd9a6cf2eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fd9a6cf2640>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd99ec976c0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd9ac79bc40>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fd9a6cf7e50>]
========================================
Start Run
========================================
2021-12-17 04:28:30.182282 | GENERATION: 1 | ERRORS: best=108, median=235.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=53.48
2021-12-17 04:28:32.975105 | GENERATION: 2 | ERRORS: best=108, median=223.5, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=31.045
2021-12-17 04:28:36.176919 | GENERATION: 3 | ERRORS: best=79, median=229.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=26.335
2021-12-17 04:28:38.789375 | GENERATION: 4 | ERRORS: best=79, median=170.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=18.725
2021-12-17 04:28:42.034080 | GENERATION: 5 | ERRORS: best=79, median=235.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=18.275
2021-12-17 04:28:44.737444 | GENERATION: 6 | ERRORS: best=79, median=235.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=16.86
2021-12-17 04:28:47.409879 | GENERATION: 7 | ERRORS: best=79, median=180.5, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=17.605
2021-12-17 04:28:50.027396 | GENERATION: 8 | ERRORS: best=79, median=163.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=17.755
2021-12-17 04:28:52.352204 | GENERATION: 9 | ERRORS: best=79, median=159.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=17.515
2021-12-17 04:28:54.445674 | GENERATION: 10 | ERRORS: best=65, median=225.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=17.76
2021-12-17 04:28:56.508456 | GENERATION: 11 | ERRORS: best=46, median=213.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=17.685
2021-12-17 04:28:58.835038 | GENERATION: 12 | ERRORS: best=36, median=234.0, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=17.33
2021-12-17 04:29:01.061140 | GENERATION: 13 | ERRORS: best=36, median=173.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=17.185
2021-12-17 04:29:02.924359 | GENERATION: 14 | ERRORS: best=36, median=188.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=17.325
2021-12-17 04:29:04.695712 | GENERATION: 15 | ERRORS: best=36, median=162.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=16.97
2021-12-17 04:29:06.388548 | GENERATION: 16 | ERRORS: best=36, median=231.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=16.66
2021-12-17 04:29:08.223037 | GENERATION: 17 | ERRORS: best=36, median=178.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=15.54
Simplifying genome of length 15 with total error 0.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome to length 11 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([InstructionMeta(name='exec_dup', code_blocks=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0), Input(input_index=0), Input(input_index=1), Input(input_index=2), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=2), Input(input_index=1)])
	Program:
	 (exec_dup (int_min int_max print_int input_0 input_1 input_2 int_max int_min input_2 input_1))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:57

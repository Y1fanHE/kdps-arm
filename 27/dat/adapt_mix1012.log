Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, step_limit=200, growth_cap=500, runtime_limit=10), output_stacks=['stdout'], arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f946a52c0a0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f9471be0a00>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f946a52c310>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9471c07580>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9472fdc240>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f9471be5a60>]
========================================
Start Run
========================================
2021-12-15 03:20:21.402654 | GENERATION: 1 | ERRORS: best=219, median=875.0, diversity=0.1 | INDIVIDUALS: n=200, avg_genome_length=67.88
2021-12-15 03:20:25.683955 | GENERATION: 2 | ERRORS: best=106, median=224.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=84.82
2021-12-15 03:20:30.306415 | GENERATION: 3 | ERRORS: best=106, median=155.0, diversity=0.39 | INDIVIDUALS: n=200, avg_genome_length=84.65
2021-12-15 03:20:35.422516 | GENERATION: 4 | ERRORS: best=93, median=141.0, diversity=0.37 | INDIVIDUALS: n=200, avg_genome_length=83.785
2021-12-15 03:20:40.525423 | GENERATION: 5 | ERRORS: best=89, median=136.0, diversity=0.54 | INDIVIDUALS: n=200, avg_genome_length=83.175
2021-12-15 03:20:45.983592 | GENERATION: 6 | ERRORS: best=88, median=155.0, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=82.48
2021-12-15 03:20:51.273198 | GENERATION: 7 | ERRORS: best=58, median=128.5, diversity=0.635 | INDIVIDUALS: n=200, avg_genome_length=82.335
2021-12-15 03:20:56.336208 | GENERATION: 8 | ERRORS: best=58, median=124.0, diversity=0.62 | INDIVIDUALS: n=200, avg_genome_length=83.375
2021-12-15 03:21:01.871676 | GENERATION: 9 | ERRORS: best=39, median=109.0, diversity=0.555 | INDIVIDUALS: n=200, avg_genome_length=83.985
2021-12-15 03:21:06.656029 | GENERATION: 10 | ERRORS: best=39, median=113.0, diversity=0.545 | INDIVIDUALS: n=200, avg_genome_length=86.07
2021-12-15 03:21:11.753763 | GENERATION: 11 | ERRORS: best=39, median=114.0, diversity=0.535 | INDIVIDUALS: n=200, avg_genome_length=86.615
2021-12-15 03:21:16.349584 | GENERATION: 12 | ERRORS: best=39, median=107.0, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=86.115
2021-12-15 03:21:21.175554 | GENERATION: 13 | ERRORS: best=39, median=108.0, diversity=0.585 | INDIVIDUALS: n=200, avg_genome_length=85.695
2021-12-15 03:21:26.154194 | GENERATION: 14 | ERRORS: best=39, median=148.0, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=85.62
2021-12-15 03:21:31.228484 | GENERATION: 15 | ERRORS: best=34, median=107.5, diversity=0.535 | INDIVIDUALS: n=200, avg_genome_length=86.68
Simplifying genome of length 87 with total error 0.
Simplified genome by 2 to length 85.
Simplified genome by 1 to length 84.
Simplified genome by 3 to length 81.
Simplified genome by 1 to length 80.
Simplified genome by 1 to length 79.
Simplified genome by 1 to length 78.
Simplified genome by 3 to length 75.
Simplified genome by 3 to length 72.
Simplified genome by 2 to length 70.
Simplified genome by 1 to length 69.
Simplified genome by 3 to length 66.
Simplified genome by 3 to length 63.
Simplified genome by 2 to length 61.
Simplified genome by 3 to length 58.
Simplified genome by 2 to length 56.
Simplified genome by 2 to length 54.
Simplified genome by 2 to length 52.
Simplified genome by 1 to length 51.
Simplified genome by 3 to length 48.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 2 to length 44.
Simplified genome by 1 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 1 to length 39.
Simplified genome by 2 to length 37.
Simplified genome by 2 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 3 to length 31.
Simplified genome by 2 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 2 to length 25.
Simplified genome by 3 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 2 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_2 input_0 input_1 int_min int_max input_0 input_1 int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:44

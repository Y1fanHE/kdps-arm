Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, runtime_limit=10, growth_cap=500, step_limit=200, collection_size_cap=1000), arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f51ebd834c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f51ebd83eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f51ebd83850>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f51e326a4c0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f51ebe97f40>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f51ebd87e50>]
========================================
Start Run
========================================
2021-12-17 10:06:14.049286 | GENERATION: 1 | ERRORS: best=226, median=5088.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=69.64
2021-12-17 10:06:15.768452 | GENERATION: 2 | ERRORS: best=201, median=226.0, diversity=0.095 | INDIVIDUALS: n=200, avg_genome_length=69.76
2021-12-17 10:06:17.804631 | GENERATION: 3 | ERRORS: best=96, median=226.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=65.44
2021-12-17 10:06:19.686069 | GENERATION: 4 | ERRORS: best=96, median=202.5, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=61.555
2021-12-17 10:06:21.755176 | GENERATION: 5 | ERRORS: best=96, median=127.0, diversity=0.26 | INDIVIDUALS: n=200, avg_genome_length=58.72
2021-12-17 10:06:23.626011 | GENERATION: 6 | ERRORS: best=96, median=127.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=53.82
2021-12-17 10:06:25.660607 | GENERATION: 7 | ERRORS: best=96, median=127.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=52.16
2021-12-17 10:06:27.809940 | GENERATION: 8 | ERRORS: best=96, median=127.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=49.455
2021-12-17 10:06:29.828649 | GENERATION: 9 | ERRORS: best=96, median=159.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=47.13
2021-12-17 10:06:31.784758 | GENERATION: 10 | ERRORS: best=96, median=144.5, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=45.755
2021-12-17 10:06:33.641252 | GENERATION: 11 | ERRORS: best=96, median=129.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=43.33
2021-12-17 10:06:35.774943 | GENERATION: 12 | ERRORS: best=96, median=123.0, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=42.145
2021-12-17 10:06:37.803201 | GENERATION: 13 | ERRORS: best=96, median=151.5, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=42.385
2021-12-17 10:06:39.745827 | GENERATION: 14 | ERRORS: best=94, median=133.0, diversity=0.39 | INDIVIDUALS: n=200, avg_genome_length=41.51
2021-12-17 10:06:41.963141 | GENERATION: 15 | ERRORS: best=81, median=126.0, diversity=0.44 | INDIVIDUALS: n=200, avg_genome_length=40.215
2021-12-17 10:06:44.312826 | GENERATION: 16 | ERRORS: best=81, median=138.0, diversity=0.57 | INDIVIDUALS: n=200, avg_genome_length=40.01
2021-12-17 10:06:46.421131 | GENERATION: 17 | ERRORS: best=81, median=124.5, diversity=0.46 | INDIVIDUALS: n=200, avg_genome_length=39.92
2021-12-17 10:06:48.536987 | GENERATION: 18 | ERRORS: best=81, median=127.0, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=39.35
2021-12-17 10:06:50.774325 | GENERATION: 19 | ERRORS: best=81, median=124.0, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=38.77
2021-12-17 10:06:53.081295 | GENERATION: 20 | ERRORS: best=45, median=126.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=38.65
2021-12-17 10:06:55.487086 | GENERATION: 21 | ERRORS: best=45, median=126.0, diversity=0.46 | INDIVIDUALS: n=200, avg_genome_length=39.295
2021-12-17 10:06:58.464482 | GENERATION: 22 | ERRORS: best=45, median=126.0, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=39.13
Simplifying genome of length 44 with total error 0.
Simplified genome by 3 to length 41.
Simplified genome by 2 to length 39.
Simplified genome by 1 to length 38.
Simplified genome by 2 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 3 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 2 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 3 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 3 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 2 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=2), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_1 int_max input_2 int_min input_0 input_1 int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:03

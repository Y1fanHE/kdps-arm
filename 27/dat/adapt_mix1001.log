Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(runtime_limit=10, collection_size_cap=1000, growth_cap=500, step_limit=200, numeric_magnitude_limit=1000000000000.0))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fdafb3c8160>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fdb04191bb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fdafb3c8730>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fdb041b8c00>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fdb0430f540>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fdb04197a60>]
========================================
Start Run
========================================
2021-12-14 19:37:22.406552 | GENERATION: 1 | ERRORS: best=235, median=4593.0, diversity=0.055 | INDIVIDUALS: n=200, avg_genome_length=63.395
2021-12-14 19:37:25.055438 | GENERATION: 2 | ERRORS: best=148, median=235.0, diversity=0.08 | INDIVIDUALS: n=200, avg_genome_length=64.13
2021-12-14 19:37:29.575571 | GENERATION: 3 | ERRORS: best=88, median=235.0, diversity=0.39 | INDIVIDUALS: n=200, avg_genome_length=66.515
2021-12-14 19:37:34.685232 | GENERATION: 4 | ERRORS: best=88, median=235.0, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=61.24
2021-12-14 19:37:39.857101 | GENERATION: 5 | ERRORS: best=86, median=223.5, diversity=0.545 | INDIVIDUALS: n=200, avg_genome_length=56.265
2021-12-14 19:37:45.503345 | GENERATION: 6 | ERRORS: best=85, median=215.5, diversity=0.555 | INDIVIDUALS: n=200, avg_genome_length=53.39
2021-12-14 19:37:51.309292 | GENERATION: 7 | ERRORS: best=76, median=182.0, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=49.82
2021-12-14 19:37:56.855750 | GENERATION: 8 | ERRORS: best=76, median=147.5, diversity=0.585 | INDIVIDUALS: n=200, avg_genome_length=48.545
2021-12-14 19:38:01.842217 | GENERATION: 9 | ERRORS: best=77, median=132.5, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=48.385
2021-12-14 19:38:06.645025 | GENERATION: 10 | ERRORS: best=76, median=137.0, diversity=0.68 | INDIVIDUALS: n=200, avg_genome_length=47.115
2021-12-14 19:38:10.701131 | GENERATION: 11 | ERRORS: best=68, median=147.5, diversity=0.685 | INDIVIDUALS: n=200, avg_genome_length=45.805
2021-12-14 19:38:14.681765 | GENERATION: 12 | ERRORS: best=54, median=136.0, diversity=0.67 | INDIVIDUALS: n=200, avg_genome_length=46.24
2021-12-14 19:38:19.202342 | GENERATION: 13 | ERRORS: best=51, median=128.5, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=44.83
2021-12-14 19:38:23.148845 | GENERATION: 14 | ERRORS: best=40, median=122.0, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=43.85
2021-12-14 19:38:26.861272 | GENERATION: 15 | ERRORS: best=40, median=106.5, diversity=0.625 | INDIVIDUALS: n=200, avg_genome_length=42.085
2021-12-14 19:38:30.186556 | GENERATION: 16 | ERRORS: best=40, median=106.5, diversity=0.555 | INDIVIDUALS: n=200, avg_genome_length=40.425
2021-12-14 19:38:33.693269 | GENERATION: 17 | ERRORS: best=40, median=109.5, diversity=0.6 | INDIVIDUALS: n=200, avg_genome_length=39.85
2021-12-14 19:38:37.126978 | GENERATION: 18 | ERRORS: best=36, median=112.0, diversity=0.575 | INDIVIDUALS: n=200, avg_genome_length=39.275
2021-12-14 19:38:40.550623 | GENERATION: 19 | ERRORS: best=36, median=107.5, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=39.185
2021-12-14 19:38:43.827055 | GENERATION: 20 | ERRORS: best=36, median=109.5, diversity=0.665 | INDIVIDUALS: n=200, avg_genome_length=37.6
2021-12-14 19:38:47.226720 | GENERATION: 21 | ERRORS: best=33, median=117.5, diversity=0.595 | INDIVIDUALS: n=200, avg_genome_length=39.01
2021-12-14 19:38:50.761454 | GENERATION: 22 | ERRORS: best=33, median=115.0, diversity=0.65 | INDIVIDUALS: n=200, avg_genome_length=38.84
2021-12-14 19:38:54.372002 | GENERATION: 23 | ERRORS: best=33, median=110.0, diversity=0.575 | INDIVIDUALS: n=200, avg_genome_length=37.945
2021-12-14 19:38:58.232798 | GENERATION: 24 | ERRORS: best=33, median=105.0, diversity=0.585 | INDIVIDUALS: n=200, avg_genome_length=38.105
2021-12-14 19:39:01.806002 | GENERATION: 25 | ERRORS: best=33, median=105.0, diversity=0.6 | INDIVIDUALS: n=200, avg_genome_length=37.81
2021-12-14 19:39:05.651238 | GENERATION: 26 | ERRORS: best=9, median=105.0, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=38.13
Simplifying genome of length 43 with total error 0.
Simplified genome by 1 to length 42.
Simplified genome by 1 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 1 to length 39.
Simplified genome by 1 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 1 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome to length 19 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=2), InstructionMeta(name='exec_swap', code_blocks=2), InstructionMeta(name='print_int', code_blocks=0), InstructionMeta(name='exec_dup_times', code_blocks=1), Closer(), Closer(), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_rot', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0)])
	Program:
	 (input_2 input_0 input_1 int_min input_0 int_min int_max input_2 exec_swap (print_int exec_dup_times ()) (input_0 input_1 int_rot int_min int_max int_min))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:02:24

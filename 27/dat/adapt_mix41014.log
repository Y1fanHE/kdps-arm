Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, growth_cap=500, collection_size_cap=1000, step_limit=200, runtime_limit=10), output_stacks=['stdout'], arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fa6d2de14c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fa6d2de1eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fa6d2de1850>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6c994e5c0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6c994ee00>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fa6d2de4e50>]
========================================
Start Run
========================================
2021-12-17 08:08:18.841110 | GENERATION: 1 | ERRORS: best=181, median=318.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=57.415
2021-12-17 08:08:22.552619 | GENERATION: 2 | ERRORS: best=180, median=223.0, diversity=0.26 | INDIVIDUALS: n=200, avg_genome_length=44.925
2021-12-17 08:08:26.058067 | GENERATION: 3 | ERRORS: best=97, median=223.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=45.92
2021-12-17 08:08:29.405547 | GENERATION: 4 | ERRORS: best=97, median=219.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=45.985
2021-12-17 08:08:32.331245 | GENERATION: 5 | ERRORS: best=97, median=181.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=43.68
2021-12-17 08:08:36.177093 | GENERATION: 6 | ERRORS: best=97, median=124.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=40.615
2021-12-17 08:08:39.388713 | GENERATION: 7 | ERRORS: best=97, median=124.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=37.81
2021-12-17 08:08:42.698503 | GENERATION: 8 | ERRORS: best=97, median=124.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=36.63
2021-12-17 08:08:45.675652 | GENERATION: 9 | ERRORS: best=97, median=115.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=34.86
2021-12-17 08:08:48.764049 | GENERATION: 10 | ERRORS: best=97, median=115.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=33.02
2021-12-17 08:08:51.680368 | GENERATION: 11 | ERRORS: best=97, median=115.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=30.895
2021-12-17 08:08:54.369650 | GENERATION: 12 | ERRORS: best=97, median=115.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=29.4
2021-12-17 08:08:56.925686 | GENERATION: 13 | ERRORS: best=97, median=115.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=28.725
2021-12-17 08:08:59.529620 | GENERATION: 14 | ERRORS: best=96, median=109.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=27.0
2021-12-17 08:09:02.242212 | GENERATION: 15 | ERRORS: best=86, median=124.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=25.64
2021-12-17 08:09:04.727850 | GENERATION: 16 | ERRORS: best=79, median=120.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=24.22
2021-12-17 08:09:07.302120 | GENERATION: 17 | ERRORS: best=79, median=124.0, diversity=0.39 | INDIVIDUALS: n=200, avg_genome_length=23.65
2021-12-17 08:09:09.620500 | GENERATION: 18 | ERRORS: best=54, median=124.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=21.6
2021-12-17 08:09:11.808083 | GENERATION: 19 | ERRORS: best=54, median=216.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=20.065
2021-12-17 08:09:13.904278 | GENERATION: 20 | ERRORS: best=54, median=124.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=20.34
2021-12-17 08:09:15.719447 | GENERATION: 21 | ERRORS: best=54, median=124.5, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=20.715
2021-12-17 08:09:17.683688 | GENERATION: 22 | ERRORS: best=54, median=124.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=20.59
2021-12-17 08:09:19.582908 | GENERATION: 23 | ERRORS: best=54, median=124.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=19.23
2021-12-17 08:09:21.645756 | GENERATION: 24 | ERRORS: best=54, median=120.5, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=19.5
2021-12-17 08:09:23.450118 | GENERATION: 25 | ERRORS: best=54, median=114.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=18.62
2021-12-17 08:09:25.341986 | GENERATION: 26 | ERRORS: best=47, median=124.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=17.925
Simplifying genome of length 22 with total error 0.
Simplified genome by 2 to length 20.
Simplified genome by 3 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 2 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_2 input_0 input_1 int_min int_max input_0 input_1 int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:26

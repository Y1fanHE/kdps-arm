Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], push_config=PushConfig(growth_cap=500, step_limit=200, collection_size_cap=1000, numeric_magnitude_limit=1000000000000.0, runtime_limit=10), arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fd2238514c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fd223851eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fd223851640>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd21c7f0100>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fd21c7f0080>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7fd223854e50>]
========================================
Start Run
========================================
2021-12-17 10:05:22.654116 | GENERATION: 1 | ERRORS: best=233, median=233.0, diversity=0.075 | INDIVIDUALS: n=200, avg_genome_length=49.585
2021-12-17 10:05:24.976010 | GENERATION: 2 | ERRORS: best=194, median=233.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=46.96
2021-12-17 10:05:27.348415 | GENERATION: 3 | ERRORS: best=99, median=233.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=53.49
2021-12-17 10:05:30.059721 | GENERATION: 4 | ERRORS: best=99, median=199.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=54.465
2021-12-17 10:05:32.479196 | GENERATION: 5 | ERRORS: best=99, median=225.0, diversity=0.34 | INDIVIDUALS: n=200, avg_genome_length=51.11
2021-12-17 10:05:34.809690 | GENERATION: 6 | ERRORS: best=99, median=203.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=51.795
2021-12-17 10:05:37.244342 | GENERATION: 7 | ERRORS: best=99, median=173.5, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=50.71
2021-12-17 10:05:39.431542 | GENERATION: 8 | ERRORS: best=99, median=220.0, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=48.65
2021-12-17 10:05:41.603043 | GENERATION: 9 | ERRORS: best=99, median=215.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=46.05
2021-12-17 10:05:44.189832 | GENERATION: 10 | ERRORS: best=94, median=188.5, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=43.555
2021-12-17 10:05:46.241271 | GENERATION: 11 | ERRORS: best=94, median=203.0, diversity=0.37 | INDIVIDUALS: n=200, avg_genome_length=41.955
2021-12-17 10:05:48.382558 | GENERATION: 12 | ERRORS: best=65, median=162.0, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=39.815
2021-12-17 10:05:50.679956 | GENERATION: 13 | ERRORS: best=54, median=221.0, diversity=0.49 | INDIVIDUALS: n=200, avg_genome_length=38.62
2021-12-17 10:05:52.969612 | GENERATION: 14 | ERRORS: best=49, median=149.5, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=36.565
2021-12-17 10:05:54.984162 | GENERATION: 15 | ERRORS: best=49, median=166.0, diversity=0.465 | INDIVIDUALS: n=200, avg_genome_length=34.705
Simplifying genome of length 34 with total error 0.
Simplified genome by 1 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 3 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 2 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 2 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=1), Input(input_index=2), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=2), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_1 input_2 int_max int_min input_2 input_1 int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:49

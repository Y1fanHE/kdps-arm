Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(growth_cap=500, collection_size_cap=1000, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, step_limit=200), arity=3, output_stacks=['stdout'])
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f6c2172e880>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f6c28ddea60>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f6c2172e6a0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f6c28e08c80>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f6c28e08a40>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f6c28de4a60>]
========================================
Start Run
========================================
2021-12-15 01:31:24.174211 | GENERATION: 1 | ERRORS: best=237, median=4688.0, diversity=0.085 | INDIVIDUALS: n=200, avg_genome_length=60.165
2021-12-15 01:31:26.593183 | GENERATION: 2 | ERRORS: best=193, median=237.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=59.61
2021-12-15 01:31:30.143390 | GENERATION: 3 | ERRORS: best=100, median=237.0, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=82.705
2021-12-15 01:31:33.796404 | GENERATION: 4 | ERRORS: best=96, median=197.0, diversity=0.5 | INDIVIDUALS: n=200, avg_genome_length=81.96
2021-12-15 01:31:37.435943 | GENERATION: 5 | ERRORS: best=95, median=181.5, diversity=0.41 | INDIVIDUALS: n=200, avg_genome_length=81.21
2021-12-15 01:31:41.237637 | GENERATION: 6 | ERRORS: best=95, median=193.5, diversity=0.46 | INDIVIDUALS: n=200, avg_genome_length=78.995
2021-12-15 01:31:45.350968 | GENERATION: 7 | ERRORS: best=95, median=160.5, diversity=0.395 | INDIVIDUALS: n=200, avg_genome_length=78.06
2021-12-15 01:31:49.301192 | GENERATION: 8 | ERRORS: best=95, median=133.0, diversity=0.355 | INDIVIDUALS: n=200, avg_genome_length=77.58
2021-12-15 01:31:53.392710 | GENERATION: 9 | ERRORS: best=95, median=139.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=76.605
2021-12-15 01:31:57.157831 | GENERATION: 10 | ERRORS: best=95, median=131.5, diversity=0.44 | INDIVIDUALS: n=200, avg_genome_length=75.36
2021-12-15 01:32:01.230494 | GENERATION: 11 | ERRORS: best=65, median=129.0, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=73.95
2021-12-15 01:32:05.032035 | GENERATION: 12 | ERRORS: best=65, median=118.0, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=71.74
2021-12-15 01:32:08.837717 | GENERATION: 13 | ERRORS: best=49, median=113.5, diversity=0.495 | INDIVIDUALS: n=200, avg_genome_length=70.505
2021-12-15 01:32:12.410877 | GENERATION: 14 | ERRORS: best=49, median=101.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=65.765
2021-12-15 01:32:15.678709 | GENERATION: 15 | ERRORS: best=47, median=101.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=66.415
2021-12-15 01:32:18.898671 | GENERATION: 16 | ERRORS: best=47, median=105.0, diversity=0.465 | INDIVIDUALS: n=200, avg_genome_length=65.56
2021-12-15 01:32:21.837406 | GENERATION: 17 | ERRORS: best=47, median=102.0, diversity=0.445 | INDIVIDUALS: n=200, avg_genome_length=63.79
2021-12-15 01:32:24.957310 | GENERATION: 18 | ERRORS: best=47, median=96.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=63.05
Simplifying genome of length 60 with total error 0.
Simplified genome by 2 to length 58.
Simplified genome by 3 to length 55.
Simplified genome by 2 to length 53.
Simplified genome by 3 to length 50.
Simplified genome by 3 to length 47.
Simplified genome by 3 to length 44.
Simplified genome by 1 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 2 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 2 to length 32.
Simplified genome by 3 to length 29.
Simplified genome by 3 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 2 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 3 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=2), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=0), Input(input_index=2), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_2 int_min input_1 int_max input_0 input_2 int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:23

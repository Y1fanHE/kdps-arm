Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(step_limit=200, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f9f862d9e20>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f9f862d9a00>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f9f862d9910>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9f7f838500>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9f7d9ba840>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f9f862dce50>]
========================================
Start Run
========================================
2021-12-17 01:15:43.834911 | GENERATION: 1 | ERRORS: best=235, median=4593.0, diversity=0.06 | INDIVIDUALS: n=200, avg_genome_length=63.175
2021-12-17 01:15:45.688974 | GENERATION: 2 | ERRORS: best=215, median=235.0, diversity=0.09 | INDIVIDUALS: n=200, avg_genome_length=64.065
2021-12-17 01:15:48.760328 | GENERATION: 3 | ERRORS: best=88, median=228.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=51.22
2021-12-17 01:15:51.337641 | GENERATION: 4 | ERRORS: best=88, median=186.5, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=52.8
2021-12-17 01:15:53.942094 | GENERATION: 5 | ERRORS: best=88, median=122.0, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=50.045
2021-12-17 01:15:56.585575 | GENERATION: 6 | ERRORS: best=88, median=121.0, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=48.77
2021-12-17 01:15:59.085333 | GENERATION: 7 | ERRORS: best=88, median=107.5, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=47.865
2021-12-17 01:16:01.594733 | GENERATION: 8 | ERRORS: best=88, median=112.5, diversity=0.41 | INDIVIDUALS: n=200, avg_genome_length=45.575
2021-12-17 01:16:04.041032 | GENERATION: 9 | ERRORS: best=88, median=122.0, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=40.73
2021-12-17 01:16:06.559884 | GENERATION: 10 | ERRORS: best=88, median=147.5, diversity=0.47 | INDIVIDUALS: n=200, avg_genome_length=38.545
2021-12-17 01:16:08.814734 | GENERATION: 11 | ERRORS: best=73, median=141.5, diversity=0.5 | INDIVIDUALS: n=200, avg_genome_length=36.725
2021-12-17 01:16:10.892968 | GENERATION: 12 | ERRORS: best=51, median=131.0, diversity=0.525 | INDIVIDUALS: n=200, avg_genome_length=34.585
2021-12-17 01:16:12.824357 | GENERATION: 13 | ERRORS: best=51, median=137.5, diversity=0.56 | INDIVIDUALS: n=200, avg_genome_length=32.575
2021-12-17 01:16:14.800621 | GENERATION: 14 | ERRORS: best=51, median=148.0, diversity=0.495 | INDIVIDUALS: n=200, avg_genome_length=32.605
2021-12-17 01:16:16.782248 | GENERATION: 15 | ERRORS: best=39, median=122.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=32.19
2021-12-17 01:16:19.269085 | GENERATION: 16 | ERRORS: best=39, median=122.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=26.51
2021-12-17 01:16:21.777683 | GENERATION: 17 | ERRORS: best=39, median=122.0, diversity=0.43 | INDIVIDUALS: n=200, avg_genome_length=25.33
2021-12-17 01:16:23.656070 | GENERATION: 18 | ERRORS: best=39, median=136.5, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=24.045
2021-12-17 01:16:25.666737 | GENERATION: 19 | ERRORS: best=39, median=122.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=22.21
2021-12-17 01:16:27.931848 | GENERATION: 20 | ERRORS: best=39, median=115.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=20.73
2021-12-17 01:16:29.926578 | GENERATION: 21 | ERRORS: best=39, median=110.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=20.085
2021-12-17 01:16:31.685849 | GENERATION: 22 | ERRORS: best=39, median=115.0, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=18.505
2021-12-17 01:16:33.379845 | GENERATION: 23 | ERRORS: best=39, median=110.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=18.45
2021-12-17 01:16:34.887680 | GENERATION: 24 | ERRORS: best=39, median=112.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=17.755
2021-12-17 01:16:36.345194 | GENERATION: 25 | ERRORS: best=39, median=111.0, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=17.385
Simplifying genome of length 16 with total error 0.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome by 1 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_2 input_0 input_1 int_min int_max input_0 input_1 int_max int_min print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:07

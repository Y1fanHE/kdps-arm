Included 0 edge cases.
Included 100 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['stdout'], push_config=PushConfig(runtime_limit=10, numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500, step_limit=200))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f3aac80e7f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f3ab3f00f40>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f3aac80e0a0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f3ab3f10900>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f3ab3f25a00>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_int at 0x7f3ab3f05a60>]
========================================
Start Run
========================================
2021-12-15 05:46:19.504295 | GENERATION: 1 | ERRORS: best=179, median=600.0, diversity=0.09 | INDIVIDUALS: n=200, avg_genome_length=59.145
2021-12-15 05:46:22.943251 | GENERATION: 2 | ERRORS: best=92, median=238.5, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=20.95
2021-12-15 05:46:26.123095 | GENERATION: 3 | ERRORS: best=92, median=150.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=20.13
2021-12-15 05:46:28.712395 | GENERATION: 4 | ERRORS: best=92, median=137.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=18.755
2021-12-15 05:46:30.857398 | GENERATION: 5 | ERRORS: best=51, median=125.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=16.935
2021-12-15 05:46:32.621870 | GENERATION: 6 | ERRORS: best=51, median=125.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=16.265
2021-12-15 05:46:34.496272 | GENERATION: 7 | ERRORS: best=51, median=121.5, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=17.45
2021-12-15 05:46:36.362934 | GENERATION: 8 | ERRORS: best=51, median=115.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=16.97
2021-12-15 05:46:38.440499 | GENERATION: 9 | ERRORS: best=51, median=116.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=17.07
2021-12-15 05:46:40.196455 | GENERATION: 10 | ERRORS: best=36, median=116.0, diversity=0.335 | INDIVIDUALS: n=200, avg_genome_length=16.435
2021-12-15 05:46:42.028832 | GENERATION: 11 | ERRORS: best=36, median=115.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=16.785
2021-12-15 05:46:44.097960 | GENERATION: 12 | ERRORS: best=36, median=115.0, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=16.765
2021-12-15 05:46:46.068397 | GENERATION: 13 | ERRORS: best=36, median=124.0, diversity=0.415 | INDIVIDUALS: n=200, avg_genome_length=16.925
2021-12-15 05:46:48.173007 | GENERATION: 14 | ERRORS: best=36, median=116.0, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=17.28
2021-12-15 05:46:50.065804 | GENERATION: 15 | ERRORS: best=36, median=115.5, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=17.39
2021-12-15 05:46:52.035557 | GENERATION: 16 | ERRORS: best=36, median=115.0, diversity=0.37 | INDIVIDUALS: n=200, avg_genome_length=16.26
2021-12-15 05:46:54.080765 | GENERATION: 17 | ERRORS: best=36, median=116.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=15.695
2021-12-15 05:46:55.906349 | GENERATION: 18 | ERRORS: best=30, median=115.0, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=15.27
Simplifying genome of length 17 with total error 0.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 2 to length 12.
Simplified genome by 1 to length 11.
Simplified genome by 1 to length 10.
Simplified genome to length 10 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_min', code_blocks=0), Input(input_index=2), Input(input_index=0), Input(input_index=1), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_min', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0)])
	Program:
	 (input_0 input_1 int_min input_2 input_0 input_1 int_max int_min int_max print_int)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:58

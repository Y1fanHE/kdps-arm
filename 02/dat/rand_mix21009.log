Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], push_config=PushConfig(collection_size_cap=1000, runtime_limit=10, growth_cap=500, step_limit=300, numeric_magnitude_limit=1000000000000.0), arity=1)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7ff43f802a00>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7ff43f802520>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7ff43f802a90>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7ff43d459680>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7ff43d459600>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7ff43f9409a0>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7ff43f9409a0>)]
ERC Generators:
[<function rand_int at 0x7ff43f80d280>]
========================================
Start Run
========================================
2021-12-14 21:51:36.464430 | GENERATION: 1 | ERRORS: best=304, median=469.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=58.355
2021-12-14 21:51:37.931975 | GENERATION: 2 | ERRORS: best=235, median=420.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=60.295
2021-12-14 21:51:39.045706 | GENERATION: 3 | ERRORS: best=235, median=420.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=39.315
2021-12-14 21:51:40.090831 | GENERATION: 4 | ERRORS: best=235, median=385.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=37.32
2021-12-14 21:51:41.095423 | GENERATION: 5 | ERRORS: best=235, median=345.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=34.775
2021-12-14 21:51:42.199605 | GENERATION: 6 | ERRORS: best=235, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=33.07
2021-12-14 21:51:43.372129 | GENERATION: 7 | ERRORS: best=235, median=345.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=32.585
2021-12-14 21:51:44.372752 | GENERATION: 8 | ERRORS: best=235, median=420.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=29.46
2021-12-14 21:51:45.292176 | GENERATION: 9 | ERRORS: best=235, median=420.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=27.905
2021-12-14 21:51:46.457037 | GENERATION: 10 | ERRORS: best=235, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=26.405
2021-12-14 21:51:47.383172 | GENERATION: 11 | ERRORS: best=235, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=26.405
2021-12-14 21:51:48.549464 | GENERATION: 12 | ERRORS: best=235, median=420.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=24.71
2021-12-14 21:51:49.566223 | GENERATION: 13 | ERRORS: best=235, median=420.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=23.685
2021-12-14 21:51:50.347609 | GENERATION: 14 | ERRORS: best=155, median=420.0, diversity=0.095 | INDIVIDUALS: n=200, avg_genome_length=21.965
2021-12-14 21:51:51.445272 | GENERATION: 15 | ERRORS: best=155, median=420.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=14.78
2021-12-14 21:51:53.343258 | GENERATION: 16 | ERRORS: best=155, median=420.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=13.2
2021-12-14 21:51:55.172873 | GENERATION: 17 | ERRORS: best=155, median=420.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=12.885
2021-12-14 21:51:56.103156 | GENERATION: 18 | ERRORS: best=155, median=420.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=14.095
2021-12-14 21:51:57.129869 | GENERATION: 19 | ERRORS: best=155, median=345.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=14.945
2021-12-14 21:51:58.207093 | GENERATION: 20 | ERRORS: best=155, median=345.0, diversity=0.095 | INDIVIDUALS: n=200, avg_genome_length=13.45
2021-12-14 21:51:59.031256 | GENERATION: 21 | ERRORS: best=155, median=420.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=13.255
2021-12-14 21:52:00.034784 | GENERATION: 22 | ERRORS: best=155, median=420.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=12.625
2021-12-14 21:52:01.004866 | GENERATION: 23 | ERRORS: best=155, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=12.895
2021-12-14 21:52:01.740224 | GENERATION: 24 | ERRORS: best=155, median=420.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=10.57
2021-12-14 21:52:02.399976 | GENERATION: 25 | ERRORS: best=155, median=385.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=11.29
2021-12-14 21:52:03.097173 | GENERATION: 26 | ERRORS: best=155, median=420.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=11.205
2021-12-14 21:52:03.973877 | GENERATION: 27 | ERRORS: best=155, median=345.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=10.995
2021-12-14 21:52:04.924995 | GENERATION: 28 | ERRORS: best=155, median=351.5, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=10.545
2021-12-14 21:52:06.008441 | GENERATION: 29 | ERRORS: best=155, median=345.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=10.265
2021-12-14 21:52:08.355661 | GENERATION: 30 | ERRORS: best=155, median=420.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=11.59
2021-12-14 21:52:09.067204 | GENERATION: 31 | ERRORS: best=155, median=420.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=12.11
2021-12-14 21:52:10.061531 | GENERATION: 32 | ERRORS: best=80, median=345.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=12.45
2021-12-14 21:52:10.830718 | GENERATION: 33 | ERRORS: best=80, median=420.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=14.47
2021-12-14 21:52:11.737415 | GENERATION: 34 | ERRORS: best=80, median=345.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=14.54
2021-12-14 21:52:12.700174 | GENERATION: 35 | ERRORS: best=80, median=402.5, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=14.895
2021-12-14 21:52:13.749166 | GENERATION: 36 | ERRORS: best=80, median=420.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=13.76
Simplifying genome of length 14 with total error 0.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7ff43d32ea30>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7ff43d32ef10>), Closer(), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7ff43d32e310>), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7ff43d32e1f0>), InstructionMeta(name='int_gte', code_blocks=0), Closer(), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 1000 int_lt exec_if ("small") ("large" input_0 2000 int_gte) exec_if (print_str) ())
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:53

Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(runtime_limit=10, collection_size_cap=1000, growth_cap=500, numeric_magnitude_limit=1000000000000.0, step_limit=300))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f23935e11f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f23935e10d0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f23935e1820>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f239350bd80>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f23936e3200>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f23959fb760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f23959fb760>)]
ERC Generators:
[<function rand_int at 0x7f23958b3f70>]
========================================
Start Run
========================================
2021-12-07 19:44:51.663503 | GENERATION: 1 | ERRORS: best=430, median=467.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=57.475
2021-12-07 19:44:53.748414 | GENERATION: 2 | ERRORS: best=265, median=827.0, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=74.115
2021-12-07 19:44:55.201558 | GENERATION: 3 | ERRORS: best=259, median=430.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=48.255
2021-12-07 19:44:56.654600 | GENERATION: 4 | ERRORS: best=235, median=430.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=43.23
2021-12-07 19:44:57.728437 | GENERATION: 5 | ERRORS: best=235, median=305.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=35.635
2021-12-07 19:44:58.768014 | GENERATION: 6 | ERRORS: best=235, median=305.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=31.505
2021-12-07 19:44:59.865386 | GENERATION: 7 | ERRORS: best=235, median=305.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=30.39
2021-12-07 19:45:00.849294 | GENERATION: 8 | ERRORS: best=195, median=305.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=29.155
2021-12-07 19:45:02.001504 | GENERATION: 9 | ERRORS: best=195, median=430.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=32.72
2021-12-07 19:45:03.296475 | GENERATION: 10 | ERRORS: best=195, median=430.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=32.765
2021-12-07 19:45:04.703737 | GENERATION: 11 | ERRORS: best=195, median=430.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=32.68
2021-12-07 19:45:06.041129 | GENERATION: 12 | ERRORS: best=195, median=430.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=31.73
2021-12-07 19:45:07.622937 | GENERATION: 13 | ERRORS: best=195, median=430.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=32.285
2021-12-07 19:45:08.745133 | GENERATION: 14 | ERRORS: best=70, median=336.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=30.73
2021-12-07 19:45:10.294759 | GENERATION: 15 | ERRORS: best=70, median=430.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=39.79
2021-12-07 19:45:11.873434 | GENERATION: 16 | ERRORS: best=70, median=430.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=40.39
2021-12-07 19:45:13.294733 | GENERATION: 17 | ERRORS: best=70, median=430.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=41.585
2021-12-07 19:45:14.841388 | GENERATION: 18 | ERRORS: best=70, median=430.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=40.565
2021-12-07 19:45:16.441604 | GENERATION: 19 | ERRORS: best=70, median=430.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=40.17
2021-12-07 19:45:17.728478 | GENERATION: 20 | ERRORS: best=70, median=430.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=40.115
2021-12-07 19:45:19.153593 | GENERATION: 21 | ERRORS: best=70, median=420.5, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=40.27
2021-12-07 19:45:20.735363 | GENERATION: 22 | ERRORS: best=70, median=430.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=38.485
2021-12-07 19:45:22.229342 | GENERATION: 23 | ERRORS: best=70, median=430.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=38.885
2021-12-07 19:45:23.665681 | GENERATION: 24 | ERRORS: best=70, median=395.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=38.365
2021-12-07 19:45:25.188338 | GENERATION: 25 | ERRORS: best=70, median=430.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=37.7
2021-12-07 19:45:26.405417 | GENERATION: 26 | ERRORS: best=70, median=305.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=38.255
2021-12-07 19:45:27.889369 | GENERATION: 27 | ERRORS: best=70, median=305.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=37.11
2021-12-07 19:45:29.553950 | GENERATION: 28 | ERRORS: best=70, median=305.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=35.625
2021-12-07 19:45:30.914432 | GENERATION: 29 | ERRORS: best=70, median=305.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=37.275
2021-12-07 19:45:32.462955 | GENERATION: 30 | ERRORS: best=70, median=305.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=38.21
2021-12-07 19:45:33.788796 | GENERATION: 31 | ERRORS: best=70, median=305.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=38.69
2021-12-07 19:45:35.238173 | GENERATION: 32 | ERRORS: best=70, median=305.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=37.975
2021-12-07 19:45:36.554403 | GENERATION: 33 | ERRORS: best=70, median=307.5, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=34.615
2021-12-07 19:45:37.684298 | GENERATION: 34 | ERRORS: best=70, median=305.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=33.585
2021-12-07 19:45:38.963204 | GENERATION: 35 | ERRORS: best=70, median=305.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=32.425
2021-12-07 19:45:40.464258 | GENERATION: 36 | ERRORS: best=70, median=265.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=34.795
2021-12-07 19:45:41.746398 | GENERATION: 37 | ERRORS: best=70, median=305.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=32.18
2021-12-07 19:45:42.893326 | GENERATION: 38 | ERRORS: best=70, median=305.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=30.495
2021-12-07 19:45:43.948514 | GENERATION: 39 | ERRORS: best=70, median=265.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=30.02
2021-12-07 19:45:44.899120 | GENERATION: 40 | ERRORS: best=70, median=305.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=29.7
2021-12-07 19:45:46.000508 | GENERATION: 41 | ERRORS: best=70, median=265.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=28.095
Simplifying genome of length 40 with total error 0.
Simplified genome by 3 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 2 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 2 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 2 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 3 to length 22.
Simplified genome by 2 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 2 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 2 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f2393236dc0>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f2393236df0>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f2393236f40>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f2393236f70>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte exec_if ("large" print_str) (input_0 1000 int_lt exec_if ("small" print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:11

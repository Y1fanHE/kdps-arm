Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, output_stacks=['stdout'], push_config=PushConfig(collection_size_cap=1000, numeric_magnitude_limit=1000000000000.0, runtime_limit=10, growth_cap=500, step_limit=300))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f47aadf0400>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f47aadf0670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f47aadf07f0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f47aae28b80>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f47aae28040>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f47ad1d8760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f47ad1d8760>)]
ERC Generators:
[<function rand_int at 0x7f47ad090f70>]
========================================
Start Run
========================================
2021-12-09 18:22:19.967914 | GENERATION: 1 | ERRORS: best=415, median=4438.0, diversity=0.03 | INDIVIDUALS: n=200, avg_genome_length=55.555
2021-12-09 18:22:21.692229 | GENERATION: 2 | ERRORS: best=260, median=415.0, diversity=0.095 | INDIVIDUALS: n=200, avg_genome_length=42.835
2021-12-09 18:22:23.319336 | GENERATION: 3 | ERRORS: best=260, median=415.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=39.765
2021-12-09 18:22:25.149159 | GENERATION: 4 | ERRORS: best=260, median=415.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=36.775
2021-12-09 18:22:26.824028 | GENERATION: 5 | ERRORS: best=260, median=415.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=32.485
2021-12-09 18:22:28.367409 | GENERATION: 6 | ERRORS: best=260, median=415.0, diversity=0.1 | INDIVIDUALS: n=200, avg_genome_length=30.12
2021-12-09 18:22:29.832831 | GENERATION: 7 | ERRORS: best=260, median=325.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=28.94
2021-12-09 18:22:31.098548 | GENERATION: 8 | ERRORS: best=260, median=325.0, diversity=0.08 | INDIVIDUALS: n=200, avg_genome_length=28.215
2021-12-09 18:22:32.277206 | GENERATION: 9 | ERRORS: best=260, median=415.0, diversity=0.07 | INDIVIDUALS: n=200, avg_genome_length=25.88
2021-12-09 18:22:33.407625 | GENERATION: 10 | ERRORS: best=260, median=325.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=26.095
2021-12-09 18:22:35.107888 | GENERATION: 11 | ERRORS: best=260, median=415.0, diversity=0.075 | INDIVIDUALS: n=200, avg_genome_length=22.275
2021-12-09 18:22:36.087892 | GENERATION: 12 | ERRORS: best=260, median=415.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=20.405
2021-12-09 18:22:37.230381 | GENERATION: 13 | ERRORS: best=183, median=415.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=26.27
2021-12-09 18:22:38.403488 | GENERATION: 14 | ERRORS: best=260, median=375.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=28.385
2021-12-09 18:22:39.695566 | GENERATION: 15 | ERRORS: best=120, median=380.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=27.195
2021-12-09 18:22:41.135493 | GENERATION: 16 | ERRORS: best=85, median=375.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=44.18
2021-12-09 18:22:42.462394 | GENERATION: 17 | ERRORS: best=85, median=375.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=59.08
2021-12-09 18:22:43.914842 | GENERATION: 18 | ERRORS: best=85, median=405.5, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=58.495
2021-12-09 18:22:45.294604 | GENERATION: 19 | ERRORS: best=85, median=388.5, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=57.59
2021-12-09 18:22:46.898416 | GENERATION: 20 | ERRORS: best=85, median=410.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=58.185
2021-12-09 18:22:48.230978 | GENERATION: 21 | ERRORS: best=85, median=325.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=58.195
2021-12-09 18:22:49.671547 | GENERATION: 22 | ERRORS: best=85, median=410.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=57.125
2021-12-09 18:22:51.067379 | GENERATION: 23 | ERRORS: best=85, median=341.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=56.33
2021-12-09 18:22:52.458023 | GENERATION: 24 | ERRORS: best=85, median=325.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=54.415
Simplifying genome of length 57 with total error 0.
Simplified genome by 1 to length 56.
Simplified genome by 1 to length 55.
Simplified genome by 1 to length 54.
Simplified genome by 3 to length 51.
Simplified genome by 2 to length 49.
Simplified genome by 1 to length 48.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 1 to length 45.
Simplified genome by 2 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 3 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 3 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 2 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 2 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 2 to length 17.
Simplified genome by 2 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f47aab44130>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f47aab44190>), Closer(), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f47aab443d0>), InstructionMeta(name='int_lt', code_blocks=0), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f47aab44580>), Closer(), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte exec_if ("large") (input_0 1000 int_lt "small") exec_if (print_str) ())
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:50

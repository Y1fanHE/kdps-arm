Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, runtime_limit=10, collection_size_cap=1000, growth_cap=500, step_limit=300), output_stacks=['stdout'], arity=1)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fa6b2591ee0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fa6b2591820>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fa6b024f340>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6b02c3f80>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6b02c33c0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b26dabb0>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b26dabb0>)]
ERC Generators:
[<function rand_int at 0x7fa6b0296670>]
========================================
Start Run
========================================
2021-12-22 20:12:48.414603 | GENERATION: 1 | ERRORS: best=420, median=5413.0, diversity=0.06 | INDIVIDUALS: n=200, avg_genome_length=68.215 | VIRUSES: gene_rate=0.000
2021-12-22 20:12:50.736319 | GENERATION: 2 | ERRORS: best=245, median=420.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=65.77 | VIRUSES: gene_rate=0.018
2021-12-22 20:12:58.672656 | GENERATION: 3 | ERRORS: best=165, median=420.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=61.045 | VIRUSES: gene_rate=0.044
2021-12-22 20:13:00.332995 | GENERATION: 4 | ERRORS: best=165, median=420.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=58.9 | VIRUSES: gene_rate=0.081
2021-12-22 20:13:01.983218 | GENERATION: 5 | ERRORS: best=163, median=420.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=58.115 | VIRUSES: gene_rate=0.093
2021-12-22 20:13:03.688974 | GENERATION: 6 | ERRORS: best=163, median=420.0, diversity=0.305 | INDIVIDUALS: n=200, avg_genome_length=55.05 | VIRUSES: gene_rate=0.103
2021-12-22 20:13:05.440056 | GENERATION: 7 | ERRORS: best=163, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=54.15 | VIRUSES: gene_rate=0.108
2021-12-22 20:13:07.245379 | GENERATION: 8 | ERRORS: best=163, median=420.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=53.225 | VIRUSES: gene_rate=0.119
2021-12-22 20:13:08.856705 | GENERATION: 9 | ERRORS: best=163, median=420.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=48.745 | VIRUSES: gene_rate=0.156
2021-12-22 20:13:10.326278 | GENERATION: 10 | ERRORS: best=163, median=420.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=48.05 | VIRUSES: gene_rate=0.169
2021-12-22 20:13:11.924762 | GENERATION: 11 | ERRORS: best=163, median=418.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=46.9 | VIRUSES: gene_rate=0.180
Simplifying genome of length 43 with total error 0.
Simplified genome by 2 to length 41.
Simplified genome by 2 to length 39.
Simplified genome by 3 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 3 to length 29.
Simplified genome by 3 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 2 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 3 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome to length 14 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([VirusInput(input_index=0), VirusLiteral(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fa6b00fbc70>), VirusInstructionMeta(name='int_lt', code_blocks=0), VirusInstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b00fb640>), Closer(), Closer(), VirusInput(input_index=0), VirusLiteral(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fa6b00fbd30>), VirusInstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_when', code_blocks=1), VirusLiteral(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b00fb9a0>), Closer(), VirusInstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (vinput_0 v1000 vint_lt vexec_if ("small") () vinput_0 v2000 vint_gte exec_when (v"large") vprint_str)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:40

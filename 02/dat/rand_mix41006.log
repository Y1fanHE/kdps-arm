Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(step_limit=300, collection_size_cap=1000, numeric_magnitude_limit=1000000000000.0, growth_cap=500, runtime_limit=10), output_stacks=['stdout'], arity=1)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f87dc4f9400>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f87dc4f94f0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f87dc4f9730>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f87dc3ce740>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f87dc3ce140>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f87de8b09a0>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f87de8b09a0>)]
ERC Generators:
[<function rand_int at 0x7f87de77d280>]
========================================
Start Run
========================================
2021-12-14 21:25:19.206718 | GENERATION: 1 | ERRORS: best=430, median=2478.0, diversity=0.03 | INDIVIDUALS: n=200, avg_genome_length=71.29
2021-12-14 21:25:21.244960 | GENERATION: 2 | ERRORS: best=376, median=462.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=88.36
2021-12-14 21:25:23.079010 | GENERATION: 3 | ERRORS: best=260, median=430.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=73.52
2021-12-14 21:25:25.038498 | GENERATION: 4 | ERRORS: best=260, median=429.5, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=71.095
2021-12-14 21:25:27.007235 | GENERATION: 5 | ERRORS: best=260, median=430.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=69.48
2021-12-14 21:25:29.089530 | GENERATION: 6 | ERRORS: best=260, median=430.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=68.535
2021-12-14 21:25:31.250030 | GENERATION: 7 | ERRORS: best=260, median=430.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=65.675
2021-12-14 21:25:33.097122 | GENERATION: 8 | ERRORS: best=260, median=420.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=62.775
2021-12-14 21:25:34.943127 | GENERATION: 9 | ERRORS: best=256, median=341.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=59.85
2021-12-14 21:25:36.650597 | GENERATION: 10 | ERRORS: best=260, median=416.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=57.91
2021-12-14 21:25:38.215916 | GENERATION: 11 | ERRORS: best=260, median=426.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=55.565
2021-12-14 21:25:40.077474 | GENERATION: 12 | ERRORS: best=260, median=334.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=53.245
2021-12-14 21:25:41.582436 | GENERATION: 13 | ERRORS: best=240, median=422.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=52.04
2021-12-14 21:25:43.102828 | GENERATION: 14 | ERRORS: best=240, median=430.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=49.695
2021-12-14 21:25:44.651376 | GENERATION: 15 | ERRORS: best=240, median=416.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=48.235
2021-12-14 21:25:46.246541 | GENERATION: 16 | ERRORS: best=206, median=310.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=45.605
2021-12-14 21:25:48.978928 | GENERATION: 17 | ERRORS: best=206, median=310.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=45.755
2021-12-14 21:25:50.659666 | GENERATION: 18 | ERRORS: best=206, median=316.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=45.015
2021-12-14 21:25:52.397363 | GENERATION: 19 | ERRORS: best=206, median=310.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=43.915
2021-12-14 21:25:55.238156 | GENERATION: 20 | ERRORS: best=206, median=358.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=43.795
2021-12-14 21:25:56.835426 | GENERATION: 21 | ERRORS: best=70, median=322.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=40.535
2021-12-14 21:25:58.957743 | GENERATION: 22 | ERRORS: best=70, median=367.5, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=42.28
Simplifying genome of length 41 with total error 0.
Simplified genome by 2 to length 39.
Simplified genome by 2 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 2 to length 32.
Simplified genome by 2 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 1 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 3 to length 18.
Simplified genome by 3 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f87dc1da490>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f87dc29b880>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f87dc29b6a0>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_while', code_blocks=1), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f87dc29b040>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte exec_if ("large" print_str) (input_0 1000 int_lt exec_while ("small" print_str)))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:58

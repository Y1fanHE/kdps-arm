Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(step_limit=300, collection_size_cap=1000, growth_cap=500, numeric_magnitude_limit=1000000000000.0, runtime_limit=10))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f0578d7d5b0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f0578d7d670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f0578d7d760>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f0578cc9e40>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f0578d0abc0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f057b1b0760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f057b1b0760>)]
ERC Generators:
[<function rand_int at 0x7f057b067f70>]
========================================
Start Run
========================================
2021-12-07 17:56:28.979579 | GENERATION: 1 | ERRORS: best=410, median=5084.0, diversity=0.04 | INDIVIDUALS: n=200, avg_genome_length=67.775
2021-12-07 17:56:30.448875 | GENERATION: 2 | ERRORS: best=240, median=410.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=53.38
2021-12-07 17:56:32.090067 | GENERATION: 3 | ERRORS: best=240, median=350.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=52.265
2021-12-07 17:56:33.755772 | GENERATION: 4 | ERRORS: best=240, median=410.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=50.83
2021-12-07 17:56:35.271971 | GENERATION: 5 | ERRORS: best=240, median=350.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=48.545
2021-12-07 17:56:36.586063 | GENERATION: 6 | ERRORS: best=240, median=410.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=47.215
2021-12-07 17:56:37.983951 | GENERATION: 7 | ERRORS: best=228, median=410.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=46.435
2021-12-07 17:56:39.355693 | GENERATION: 8 | ERRORS: best=228, median=350.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=46.735
2021-12-07 17:56:40.750787 | GENERATION: 9 | ERRORS: best=228, median=350.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=47.0
2021-12-07 17:56:42.288741 | GENERATION: 10 | ERRORS: best=228, median=359.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=46.08
2021-12-07 17:56:44.369446 | GENERATION: 11 | ERRORS: best=210, median=360.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=46.99
2021-12-07 17:56:45.977962 | GENERATION: 12 | ERRORS: best=210, median=410.0, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=53.255
2021-12-07 17:56:47.648830 | GENERATION: 13 | ERRORS: best=210, median=410.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=53.26
2021-12-07 17:56:49.152658 | GENERATION: 14 | ERRORS: best=210, median=410.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=50.41
2021-12-07 17:56:51.049266 | GENERATION: 15 | ERRORS: best=90, median=410.0, diversity=0.365 | INDIVIDUALS: n=200, avg_genome_length=48.685
2021-12-07 17:56:53.313783 | GENERATION: 16 | ERRORS: best=90, median=410.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=46.615
2021-12-07 17:56:55.128660 | GENERATION: 17 | ERRORS: best=90, median=380.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=45.585
2021-12-07 17:56:56.939810 | GENERATION: 18 | ERRORS: best=90, median=380.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=45.455
2021-12-07 17:56:59.540910 | GENERATION: 19 | ERRORS: best=90, median=410.0, diversity=0.305 | INDIVIDUALS: n=200, avg_genome_length=44.97
2021-12-07 17:57:01.444697 | GENERATION: 20 | ERRORS: best=90, median=380.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=44.565
2021-12-07 17:57:03.044667 | GENERATION: 21 | ERRORS: best=90, median=380.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=42.365
2021-12-07 17:57:04.515212 | GENERATION: 22 | ERRORS: best=90, median=410.0, diversity=0.305 | INDIVIDUALS: n=200, avg_genome_length=41.43
2021-12-07 17:57:06.193819 | GENERATION: 23 | ERRORS: best=65, median=410.0, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=41.14
2021-12-07 17:57:07.911562 | GENERATION: 24 | ERRORS: best=65, median=350.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=41.495
2021-12-07 17:57:10.187578 | GENERATION: 25 | ERRORS: best=65, median=410.0, diversity=0.355 | INDIVIDUALS: n=200, avg_genome_length=41.525
2021-12-07 17:57:12.129289 | GENERATION: 26 | ERRORS: best=65, median=385.5, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=39.57
2021-12-07 17:57:14.196580 | GENERATION: 27 | ERRORS: best=65, median=380.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=38.77
Simplifying genome of length 37 with total error 0.
Simplified genome by 2 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 2 to length 32.
Simplified genome by 3 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 2 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f0578bc38b0>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_while', code_blocks=1), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f0578bc36a0>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f0578bc37c0>), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f05788fb6a0>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte exec_while ("large" print_str) "small" input_0 1000 int_lt exec_if (print_str) ())
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:10

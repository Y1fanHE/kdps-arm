Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500, step_limit=300, runtime_limit=10))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f66ebc94bb0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f66ebc947f0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f66ebc94fd0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f66e98f4b00>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f66e98f48c0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f66ebddcbb0>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f66ebddcbb0>)]
ERC Generators:
[<function rand_int at 0x7f66e99d8670>]
========================================
Start Run
========================================
2021-12-22 21:53:16.668143 | GENERATION: 1 | ERRORS: best=420, median=479.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=62.67 | VIRUSES: gene_rate=0.000
2021-12-22 21:53:18.404010 | GENERATION: 2 | ERRORS: best=265, median=479.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=75.015 | VIRUSES: gene_rate=0.013
2021-12-22 21:53:20.376874 | GENERATION: 3 | ERRORS: best=235, median=420.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=73.91 | VIRUSES: gene_rate=0.036
2021-12-22 21:53:22.269404 | GENERATION: 4 | ERRORS: best=235, median=420.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=59.52 | VIRUSES: gene_rate=0.077
2021-12-22 21:53:24.241209 | GENERATION: 5 | ERRORS: best=235, median=420.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=59.01 | VIRUSES: gene_rate=0.090
2021-12-22 21:53:26.126387 | GENERATION: 6 | ERRORS: best=235, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=57.765 | VIRUSES: gene_rate=0.107
2021-12-22 21:53:27.938926 | GENERATION: 7 | ERRORS: best=235, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=53.73 | VIRUSES: gene_rate=0.124
2021-12-22 21:53:30.145787 | GENERATION: 8 | ERRORS: best=225, median=420.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=57.295 | VIRUSES: gene_rate=0.125
2021-12-22 21:53:32.082270 | GENERATION: 9 | ERRORS: best=225, median=420.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=61.755 | VIRUSES: gene_rate=0.127
2021-12-22 21:53:34.356494 | GENERATION: 10 | ERRORS: best=225, median=420.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=61.34 | VIRUSES: gene_rate=0.125
2021-12-22 21:53:36.461979 | GENERATION: 11 | ERRORS: best=225, median=420.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=57.09 | VIRUSES: gene_rate=0.146
2021-12-22 21:53:38.459696 | GENERATION: 12 | ERRORS: best=80, median=420.0, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=68.85 | VIRUSES: gene_rate=0.126
2021-12-22 21:53:39.837128 | GENERATION: 13 | ERRORS: best=80, median=420.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=50.105 | VIRUSES: gene_rate=0.203
2021-12-22 21:53:41.272984 | GENERATION: 14 | ERRORS: best=80, median=420.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=52.035 | VIRUSES: gene_rate=0.207
2021-12-22 21:53:42.815744 | GENERATION: 15 | ERRORS: best=80, median=420.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=52.405 | VIRUSES: gene_rate=0.217
2021-12-22 21:53:44.312267 | GENERATION: 16 | ERRORS: best=40, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=51.74 | VIRUSES: gene_rate=0.220
2021-12-22 21:53:46.167432 | GENERATION: 17 | ERRORS: best=40, median=320.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=48.03 | VIRUSES: gene_rate=0.235
2021-12-22 21:53:47.810479 | GENERATION: 18 | ERRORS: best=40, median=420.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=47.645 | VIRUSES: gene_rate=0.226
2021-12-22 21:53:49.521951 | GENERATION: 19 | ERRORS: best=40, median=420.0, diversity=0.315 | INDIVIDUALS: n=200, avg_genome_length=48.84 | VIRUSES: gene_rate=0.231
2021-12-22 21:53:51.394114 | GENERATION: 20 | ERRORS: best=40, median=374.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=50.4 | VIRUSES: gene_rate=0.224
Simplifying genome of length 48 with total error 0.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 2 to length 44.
Simplified genome by 1 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 3 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 2 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 2 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 3 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([VirusInput(input_index=0), VirusLiteral(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f66e9b2e340>), VirusInstructionMeta(name='int_gte', code_blocks=0), VirusInstructionMeta(name='exec_if', code_blocks=2), VirusLiteral(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f66e9b2e7f0>), VirusInstructionMeta(name='print_str', code_blocks=0), Closer(), VirusInput(input_index=0), VirusLiteral(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f66e9b2e670>), VirusInstructionMeta(name='int_lt', code_blocks=0), VirusInstructionMeta(name='exec_if', code_blocks=2), VirusLiteral(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f66e9b2e280>), VirusInstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (vinput_0 v2000 vint_gte vexec_if (v"large" vprint_str) (vinput_0 v1000 vint_lt vexec_if (v"small" vprint_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:52

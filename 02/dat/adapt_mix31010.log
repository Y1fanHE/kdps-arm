Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, growth_cap=500, step_limit=300, runtime_limit=10, collection_size_cap=1000), output_stacks=['stdout'])
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f4599212400>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f4599212670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f4599212460>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f4599101240>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f4599267ec0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f459b5e8760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f459b5e8760>)]
ERC Generators:
[<function rand_int at 0x7f459b49ff70>]
========================================
Start Run
========================================
2021-12-09 18:17:23.703994 | GENERATION: 1 | ERRORS: best=324, median=4584.0, diversity=0.05 | INDIVIDUALS: n=200, avg_genome_length=57.36
2021-12-09 18:17:25.421796 | GENERATION: 2 | ERRORS: best=260, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=57.14
2021-12-09 18:17:27.234666 | GENERATION: 3 | ERRORS: best=180, median=420.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=56.175
2021-12-09 18:17:28.899419 | GENERATION: 4 | ERRORS: best=180, median=424.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=58.955
2021-12-09 18:17:30.582353 | GENERATION: 5 | ERRORS: best=180, median=426.0, diversity=0.36 | INDIVIDUALS: n=200, avg_genome_length=58.66
2021-12-09 18:17:32.339440 | GENERATION: 6 | ERRORS: best=180, median=420.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=57.6
2021-12-09 18:17:33.988300 | GENERATION: 7 | ERRORS: best=180, median=420.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=55.19
2021-12-09 18:17:35.643890 | GENERATION: 8 | ERRORS: best=180, median=420.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=55.19
2021-12-09 18:17:37.445483 | GENERATION: 9 | ERRORS: best=180, median=420.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=54.6
2021-12-09 18:17:38.903342 | GENERATION: 10 | ERRORS: best=180, median=416.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=52.375
2021-12-09 18:17:40.731698 | GENERATION: 11 | ERRORS: best=180, median=420.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=55.255
2021-12-09 18:17:42.485233 | GENERATION: 12 | ERRORS: best=180, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=53.935
2021-12-09 18:17:44.158169 | GENERATION: 13 | ERRORS: best=180, median=420.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=54.185
2021-12-09 18:17:45.645500 | GENERATION: 14 | ERRORS: best=180, median=420.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=53.055
2021-12-09 18:17:47.537277 | GENERATION: 15 | ERRORS: best=180, median=420.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=51.775
2021-12-09 18:17:49.295290 | GENERATION: 16 | ERRORS: best=180, median=420.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=51.53
2021-12-09 18:17:51.098597 | GENERATION: 17 | ERRORS: best=180, median=420.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=49.545
2021-12-09 18:17:52.816840 | GENERATION: 18 | ERRORS: best=180, median=420.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=49.95
2021-12-09 18:17:54.495519 | GENERATION: 19 | ERRORS: best=180, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=49.805
2021-12-09 18:17:56.186156 | GENERATION: 20 | ERRORS: best=180, median=420.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=48.31
2021-12-09 18:17:58.002241 | GENERATION: 21 | ERRORS: best=180, median=420.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=48.165
2021-12-09 18:17:59.663486 | GENERATION: 22 | ERRORS: best=180, median=420.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=49.385
2021-12-09 18:18:01.213574 | GENERATION: 23 | ERRORS: best=80, median=420.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=49.16
2021-12-09 18:18:02.767125 | GENERATION: 24 | ERRORS: best=80, median=260.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=50.15
2021-12-09 18:18:04.713798 | GENERATION: 25 | ERRORS: best=80, median=260.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=50.7
2021-12-09 18:18:06.026088 | GENERATION: 26 | ERRORS: best=80, median=260.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=50.675
2021-12-09 18:18:07.495964 | GENERATION: 27 | ERRORS: best=80, median=260.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=50.655
2021-12-09 18:18:08.980353 | GENERATION: 28 | ERRORS: best=80, median=260.0, diversity=0.26 | INDIVIDUALS: n=200, avg_genome_length=49.115
2021-12-09 18:18:10.728145 | GENERATION: 29 | ERRORS: best=80, median=260.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=48.345
2021-12-09 18:18:11.996071 | GENERATION: 30 | ERRORS: best=80, median=260.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=47.34
2021-12-09 18:18:14.022498 | GENERATION: 31 | ERRORS: best=80, median=260.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=46.64
Simplifying genome of length 42 with total error 0.
Simplified genome by 2 to length 40.
Simplified genome by 3 to length 37.
Simplified genome by 2 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 2 to length 32.
Simplified genome by 3 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 2 to length 15.
Simplified genome by 1 to length 14.
Simplified genome to length 14 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([InstructionMeta(name='exec_dup', code_blocks=1), InstructionMeta(name='int_lt', code_blocks=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f4599262520>), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='int_dec', code_blocks=0), InstructionMeta(name='print_str', code_blocks=0), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f45992624f0>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f4599087730>), Closer(), Input(input_index=0), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f4599087160>)])
	Program:
	 (exec_dup (int_lt 2000 exec_if (int_dec print_str input_0 1000 int_lt exec_if ("small") (input_0 "large")) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:14

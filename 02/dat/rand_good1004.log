Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, push_config=PushConfig(growth_cap=500, collection_size_cap=1000, numeric_magnitude_limit=1000000000000.0, runtime_limit=10, step_limit=300), output_stacks=['stdout'])
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fb77bb945b0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fb77bb94670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fb77bb94760>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fb77ba72a40>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fb77bbc0500>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fb77df5d760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fb77df5d760>)]
ERC Generators:
[<function rand_int at 0x7fb77de15f70>]
========================================
Start Run
========================================
2021-12-07 13:47:42.755933 | GENERATION: 1 | ERRORS: best=430, median=430.0, diversity=0.03 | INDIVIDUALS: n=200, avg_genome_length=56.075
2021-12-07 13:47:44.598152 | GENERATION: 2 | ERRORS: best=250, median=430.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=48.54
2021-12-07 13:47:46.468977 | GENERATION: 3 | ERRORS: best=250, median=350.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=49.24
2021-12-07 13:47:48.280084 | GENERATION: 4 | ERRORS: best=250, median=320.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=50.845
2021-12-07 13:47:50.278321 | GENERATION: 5 | ERRORS: best=250, median=378.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=48.71
2021-12-07 13:47:52.019857 | GENERATION: 6 | ERRORS: best=250, median=335.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=48.84
2021-12-07 13:47:53.776110 | GENERATION: 7 | ERRORS: best=190, median=430.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=45.61
2021-12-07 13:47:55.544439 | GENERATION: 8 | ERRORS: best=70, median=430.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=45.165
2021-12-07 13:47:57.195350 | GENERATION: 9 | ERRORS: best=70, median=320.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=49.6
2021-12-07 13:47:58.866501 | GENERATION: 10 | ERRORS: best=70, median=430.0, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=50.295
2021-12-07 13:48:00.382785 | GENERATION: 11 | ERRORS: best=70, median=430.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=50.025
2021-12-07 13:48:02.217933 | GENERATION: 12 | ERRORS: best=70, median=430.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=48.545
2021-12-07 13:48:03.886883 | GENERATION: 13 | ERRORS: best=65, median=430.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=46.075
2021-12-07 13:48:06.586036 | GENERATION: 14 | ERRORS: best=65, median=430.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=47.27
2021-12-07 13:48:08.395007 | GENERATION: 15 | ERRORS: best=65, median=355.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=46.72
2021-12-07 13:48:10.806730 | GENERATION: 16 | ERRORS: best=65, median=430.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=46.08
2021-12-07 13:48:14.466167 | GENERATION: 17 | ERRORS: best=65, median=430.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=44.56
2021-12-07 13:48:17.770924 | GENERATION: 18 | ERRORS: best=50, median=430.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=43.16
2021-12-07 13:48:20.101847 | GENERATION: 19 | ERRORS: best=50, median=320.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=44.37
2021-12-07 13:48:22.395886 | GENERATION: 20 | ERRORS: best=50, median=320.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=42.545
2021-12-07 13:48:24.483419 | GENERATION: 21 | ERRORS: best=50, median=320.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=43.23
2021-12-07 13:48:26.935613 | GENERATION: 22 | ERRORS: best=50, median=390.0, diversity=0.26 | INDIVIDUALS: n=200, avg_genome_length=42.06
2021-12-07 13:48:28.971788 | GENERATION: 23 | ERRORS: best=50, median=417.5, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=42.565
2021-12-07 13:48:31.017221 | GENERATION: 24 | ERRORS: best=50, median=320.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=41.31
2021-12-07 13:48:33.625195 | GENERATION: 25 | ERRORS: best=50, median=321.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=40.22
2021-12-07 13:48:35.253444 | GENERATION: 26 | ERRORS: best=50, median=320.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=37.06
2021-12-07 13:48:36.955246 | GENERATION: 27 | ERRORS: best=50, median=384.0, diversity=0.325 | INDIVIDUALS: n=200, avg_genome_length=36.615
2021-12-07 13:48:38.759157 | GENERATION: 28 | ERRORS: best=50, median=320.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=36.745
2021-12-07 13:48:40.722826 | GENERATION: 29 | ERRORS: best=50, median=320.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=37.29
2021-12-07 13:48:43.103985 | GENERATION: 30 | ERRORS: best=50, median=320.0, diversity=0.3 | INDIVIDUALS: n=200, avg_genome_length=37.515
2021-12-07 13:48:45.085547 | GENERATION: 31 | ERRORS: best=50, median=320.0, diversity=0.345 | INDIVIDUALS: n=200, avg_genome_length=36.925
2021-12-07 13:48:47.059156 | GENERATION: 32 | ERRORS: best=50, median=430.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=38.87
2021-12-07 13:48:48.812455 | GENERATION: 33 | ERRORS: best=50, median=430.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=38.885
2021-12-07 13:48:51.150987 | GENERATION: 34 | ERRORS: best=50, median=380.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=38.12
2021-12-07 13:48:52.855620 | GENERATION: 35 | ERRORS: best=50, median=320.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=35.9
2021-12-07 13:48:55.066539 | GENERATION: 36 | ERRORS: best=50, median=427.5, diversity=0.35 | INDIVIDUALS: n=200, avg_genome_length=35.96
2021-12-07 13:48:57.755482 | GENERATION: 37 | ERRORS: best=50, median=430.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=35.89
2021-12-07 13:49:00.064573 | GENERATION: 38 | ERRORS: best=50, median=400.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=35.75
Simplifying genome of length 33 with total error 0.
Simplified genome by 3 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 1 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 2 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 3 to length 19.
Simplified genome by 2 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fb77b8b7280>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fb77b8b7df0>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fb77b8b7ac0>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fb77b8b73d0>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte exec_if ("large" print_str) (input_0 1000 int_lt exec_if ("small" print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:34

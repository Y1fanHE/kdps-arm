Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(runtime_limit=10, numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500, step_limit=300))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fecd48de400>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fecd48de670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fecd48de460>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fecd4934cc0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fecd4934380>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fecd6cae760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fecd6cae760>)]
ERC Generators:
[<function rand_int at 0x7fecd6b66f70>]
========================================
Start Run
========================================
2021-12-09 19:40:02.698975 | GENERATION: 1 | ERRORS: best=425, median=839.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=69.49
2021-12-09 19:40:03.852610 | GENERATION: 2 | ERRORS: best=265, median=425.0, diversity=0.065 | INDIVIDUALS: n=200, avg_genome_length=62.06
2021-12-09 19:40:05.266594 | GENERATION: 3 | ERRORS: best=265, median=425.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=50.52
2021-12-09 19:40:06.426345 | GENERATION: 4 | ERRORS: best=265, median=425.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=49.48
2021-12-09 19:40:07.691575 | GENERATION: 5 | ERRORS: best=259, median=310.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=45.48
2021-12-09 19:40:08.855109 | GENERATION: 6 | ERRORS: best=265, median=401.5, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=44.21
2021-12-09 19:40:09.865994 | GENERATION: 7 | ERRORS: best=265, median=310.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=40.91
2021-12-09 19:40:11.120927 | GENERATION: 8 | ERRORS: best=265, median=310.0, diversity=0.09 | INDIVIDUALS: n=200, avg_genome_length=39.81
2021-12-09 19:40:11.986776 | GENERATION: 9 | ERRORS: best=235, median=310.0, diversity=0.085 | INDIVIDUALS: n=200, avg_genome_length=37.015
2021-12-09 19:40:13.225027 | GENERATION: 10 | ERRORS: best=235, median=425.0, diversity=0.085 | INDIVIDUALS: n=200, avg_genome_length=42.62
2021-12-09 19:40:14.449463 | GENERATION: 11 | ERRORS: best=235, median=425.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=43.21
2021-12-09 19:40:15.621095 | GENERATION: 12 | ERRORS: best=235, median=371.5, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=44.96
2021-12-09 19:40:17.052341 | GENERATION: 13 | ERRORS: best=235, median=425.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=47.24
2021-12-09 19:40:18.629587 | GENERATION: 14 | ERRORS: best=235, median=425.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=45.88
2021-12-09 19:40:20.025395 | GENERATION: 15 | ERRORS: best=235, median=310.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=45.395
2021-12-09 19:40:21.293174 | GENERATION: 16 | ERRORS: best=235, median=425.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=46.405
2021-12-09 19:40:22.692672 | GENERATION: 17 | ERRORS: best=235, median=425.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=44.705
2021-12-09 19:40:23.840185 | GENERATION: 18 | ERRORS: best=235, median=299.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=47.465
2021-12-09 19:40:25.193874 | GENERATION: 19 | ERRORS: best=235, median=310.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=47.345
2021-12-09 19:40:26.505329 | GENERATION: 20 | ERRORS: best=235, median=310.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=45.06
2021-12-09 19:40:27.846700 | GENERATION: 21 | ERRORS: best=235, median=310.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=44.675
2021-12-09 19:40:29.047150 | GENERATION: 22 | ERRORS: best=75, median=310.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=43.91
2021-12-09 19:40:34.773236 | GENERATION: 23 | ERRORS: best=75, median=310.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=37.87
2021-12-09 19:40:35.966053 | GENERATION: 24 | ERRORS: best=75, median=340.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=36.795
2021-12-09 19:40:37.390634 | GENERATION: 25 | ERRORS: best=75, median=310.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=36.67
2021-12-09 19:40:38.490345 | GENERATION: 26 | ERRORS: best=75, median=310.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=36.51
2021-12-09 19:40:42.768299 | GENERATION: 27 | ERRORS: best=75, median=360.0, diversity=0.265 | INDIVIDUALS: n=200, avg_genome_length=36.19
2021-12-09 19:40:44.340542 | GENERATION: 28 | ERRORS: best=75, median=328.5, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=36.29
Simplifying genome of length 32 with total error 0.
Simplified genome by 1 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 2 to length 28.
Simplified genome by 2 to length 26.
Simplified genome by 3 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 2 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome to length 15 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fecd4704550>), InstructionMeta(name='int_lt', code_blocks=0), Literal(value=5525, push_type=<pyshgp.push.types.PushIntType object at 0x7fecd47044c0>), InstructionMeta(name='exec_when', code_blocks=1), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fecd4704820>), Closer(), InstructionMeta(name='exec_do_while', code_blocks=1), InstructionMeta(name='exec_yank_dup', code_blocks=0), InstructionMeta(name='print_str', code_blocks=0), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fecd490ac10>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_when', code_blocks=1), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fecd490a820>)])
	Program:
	 (input_0 1000 int_lt 5525 exec_when ("small") exec_do_while (exec_yank_dup print_str input_0 2000 int_gte exec_when ("large")))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:09

Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(collection_size_cap=1000, growth_cap=500, step_limit=300, numeric_magnitude_limit=1000000000000.0, runtime_limit=10))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fe0ee3856d0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fe0ee376a60>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fe0ee3857f0>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fe0ebfd9ac0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fe0ebfd9740>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fe0ee4c6760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fe0ee4c6760>)]
ERC Generators:
[<function rand_int at 0x7fe0ee37ef70>]
========================================
Start Run
========================================
2021-12-09 18:09:06.181675 | GENERATION: 1 | ERRORS: best=304, median=469.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=57.82
2021-12-09 18:09:07.252478 | GENERATION: 2 | ERRORS: best=304, median=420.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=62.315
2021-12-09 18:09:08.434214 | GENERATION: 3 | ERRORS: best=235, median=345.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=58.77
2021-12-09 18:09:09.604733 | GENERATION: 4 | ERRORS: best=235, median=345.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=56.785
2021-12-09 18:09:10.839757 | GENERATION: 5 | ERRORS: best=235, median=345.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=54.7
2021-12-09 18:09:12.143687 | GENERATION: 6 | ERRORS: best=235, median=345.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=55.85
2021-12-09 18:09:13.576439 | GENERATION: 7 | ERRORS: best=235, median=345.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=56.515
2021-12-09 18:09:14.759688 | GENERATION: 8 | ERRORS: best=235, median=345.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=53.085
2021-12-09 18:09:16.082256 | GENERATION: 9 | ERRORS: best=235, median=345.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=54.87
2021-12-09 18:09:17.206635 | GENERATION: 10 | ERRORS: best=155, median=345.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=54.575
2021-12-09 18:09:18.829180 | GENERATION: 11 | ERRORS: best=155, median=345.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=92.61
2021-12-09 18:09:20.364477 | GENERATION: 12 | ERRORS: best=155, median=345.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=92.175
2021-12-09 18:09:21.985414 | GENERATION: 13 | ERRORS: best=155, median=345.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=91.98
2021-12-09 18:09:23.461490 | GENERATION: 14 | ERRORS: best=155, median=345.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=90.305
2021-12-09 18:09:25.090316 | GENERATION: 15 | ERRORS: best=155, median=345.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=88.37
2021-12-09 18:09:26.640126 | GENERATION: 16 | ERRORS: best=155, median=345.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=89.24
2021-12-09 18:09:28.081799 | GENERATION: 17 | ERRORS: best=155, median=345.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=87.86
2021-12-09 18:09:29.669365 | GENERATION: 18 | ERRORS: best=155, median=345.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=85.99
2021-12-09 18:09:31.178032 | GENERATION: 19 | ERRORS: best=155, median=345.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=85.59
2021-12-09 18:09:32.866182 | GENERATION: 20 | ERRORS: best=155, median=345.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=85.8
2021-12-09 18:09:34.245587 | GENERATION: 21 | ERRORS: best=155, median=345.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=84.1
2021-12-09 18:09:35.789191 | GENERATION: 22 | ERRORS: best=155, median=345.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=81.775
2021-12-09 18:09:37.482905 | GENERATION: 23 | ERRORS: best=155, median=345.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=79.015
2021-12-09 18:09:38.928567 | GENERATION: 24 | ERRORS: best=155, median=345.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=77.44
2021-12-09 18:09:40.430959 | GENERATION: 25 | ERRORS: best=155, median=345.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=77.04
2021-12-09 18:09:41.985547 | GENERATION: 26 | ERRORS: best=155, median=345.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=73.875
2021-12-09 18:09:43.357005 | GENERATION: 27 | ERRORS: best=80, median=345.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=72.45
2021-12-09 18:09:44.581695 | GENERATION: 28 | ERRORS: best=80, median=235.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=68.055
2021-12-09 18:09:46.048362 | GENERATION: 29 | ERRORS: best=80, median=235.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=66.14
Simplifying genome of length 66 with total error 0.
Simplified genome by 1 to length 65.
Simplified genome by 1 to length 64.
Simplified genome by 1 to length 63.
Simplified genome by 1 to length 62.
Simplified genome by 2 to length 60.
Simplified genome by 1 to length 59.
Simplified genome by 3 to length 56.
Simplified genome by 3 to length 53.
Simplified genome by 2 to length 51.
Simplified genome by 1 to length 50.
Simplified genome by 1 to length 49.
Simplified genome by 1 to length 48.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 1 to length 45.
Simplified genome by 2 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 2 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 3 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 2 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 2 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fe0ebe20550>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fe0ebe20310>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fe0ebe20a60>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fe0ebe20220>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 1000 int_lt exec_if ("small" print_str) (input_0 2000 int_gte exec_if ("large" print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:57

Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, output_stacks=['stdout'], push_config=PushConfig(collection_size_cap=1000, step_limit=300, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, growth_cap=500))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f3e231015b0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f3e23101670>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f3e23101760>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f3e22ff9a00>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f3e22ff9700>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f3e254df760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f3e254df760>)]
ERC Generators:
[<function rand_int at 0x7f3e25397f70>]
========================================
Start Run
========================================
2021-12-07 14:07:29.915913 | GENERATION: 1 | ERRORS: best=420, median=5413.0, diversity=0.06 | INDIVIDUALS: n=200, avg_genome_length=68.215
2021-12-07 14:07:32.058693 | GENERATION: 2 | ERRORS: best=245, median=420.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=65.185
2021-12-07 14:07:34.670065 | GENERATION: 3 | ERRORS: best=165, median=420.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=62.69
2021-12-07 14:07:36.715442 | GENERATION: 4 | ERRORS: best=165, median=335.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=63.19
2021-12-07 14:07:38.559526 | GENERATION: 5 | ERRORS: best=165, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=61.025
2021-12-07 14:07:40.360681 | GENERATION: 6 | ERRORS: best=165, median=420.0, diversity=0.33 | INDIVIDUALS: n=200, avg_genome_length=61.395
2021-12-07 14:07:42.311451 | GENERATION: 7 | ERRORS: best=165, median=420.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=60.49
2021-12-07 14:07:44.231983 | GENERATION: 8 | ERRORS: best=163, median=420.0, diversity=0.31 | INDIVIDUALS: n=200, avg_genome_length=59.125
2021-12-07 14:07:46.712931 | GENERATION: 9 | ERRORS: best=163, median=420.0, diversity=0.32 | INDIVIDUALS: n=200, avg_genome_length=57.53
2021-12-07 14:07:48.539061 | GENERATION: 10 | ERRORS: best=163, median=420.0, diversity=0.29 | INDIVIDUALS: n=200, avg_genome_length=56.485
2021-12-07 14:07:50.800810 | GENERATION: 11 | ERRORS: best=148, median=420.0, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=55.1
2021-12-07 14:07:52.563583 | GENERATION: 12 | ERRORS: best=163, median=420.0, diversity=0.385 | INDIVIDUALS: n=200, avg_genome_length=53.74
2021-12-07 14:07:54.153788 | GENERATION: 13 | ERRORS: best=163, median=420.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=50.85
2021-12-07 14:07:55.863574 | GENERATION: 14 | ERRORS: best=80, median=420.0, diversity=0.305 | INDIVIDUALS: n=200, avg_genome_length=50.475
2021-12-07 14:07:57.270544 | GENERATION: 15 | ERRORS: best=80, median=420.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=47.31
2021-12-07 14:07:58.982372 | GENERATION: 16 | ERRORS: best=80, median=420.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=46.755
2021-12-07 14:08:00.398599 | GENERATION: 17 | ERRORS: best=80, median=420.0, diversity=0.295 | INDIVIDUALS: n=200, avg_genome_length=45.91
2021-12-07 14:08:01.806039 | GENERATION: 18 | ERRORS: best=80, median=420.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=45.37
2021-12-07 14:08:03.180443 | GENERATION: 19 | ERRORS: best=80, median=420.0, diversity=0.285 | INDIVIDUALS: n=200, avg_genome_length=42.575
Simplifying genome of length 46 with total error 0.
Simplified genome by 1 to length 45.
Simplified genome by 2 to length 43.
Simplified genome by 3 to length 40.
Simplified genome by 3 to length 37.
Simplified genome by 2 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 3 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 2 to length 21.
Simplified genome by 3 to length 18.
Simplified genome by 2 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f3e22ef97f0>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f3e22ef99d0>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f3e22ef9a30>), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f3e22ef9a90>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 input_0 2000 int_gte exec_if ("large" print_str) ("small" 1000 int_lt exec_if (print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:51

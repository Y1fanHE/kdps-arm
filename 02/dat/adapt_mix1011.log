Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(runtime_limit=10, growth_cap=500, numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, step_limit=300))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fe7e5b411f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fe7e5b410d0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fe7e5b41490>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fe7e7ea1bc0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fe7ed0a3640>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fe7e7f04790>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fe7e7f04790>)]
ERC Generators:
[<function rand_int at 0x7fe7e7dbcf70>]
========================================
Start Run
========================================
2021-12-07 16:15:47.481611 | GENERATION: 1 | ERRORS: best=415, median=4438.0, diversity=0.03 | INDIVIDUALS: n=200, avg_genome_length=55.805
2021-12-07 16:15:49.462623 | GENERATION: 2 | ERRORS: best=260, median=415.0, diversity=0.09 | INDIVIDUALS: n=200, avg_genome_length=43.43
2021-12-07 16:15:51.215380 | GENERATION: 3 | ERRORS: best=260, median=415.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=40.02
2021-12-07 16:15:52.681778 | GENERATION: 4 | ERRORS: best=260, median=415.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=37.24
2021-12-07 16:15:54.049261 | GENERATION: 5 | ERRORS: best=240, median=415.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=35.32
2021-12-07 16:15:55.203625 | GENERATION: 6 | ERRORS: best=85, median=325.0, diversity=0.1 | INDIVIDUALS: n=200, avg_genome_length=29.985
2021-12-07 16:15:56.026840 | GENERATION: 7 | ERRORS: best=85, median=325.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=29.345
2021-12-07 16:15:56.838889 | GENERATION: 8 | ERRORS: best=85, median=325.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=28.55
2021-12-07 16:15:57.715574 | GENERATION: 9 | ERRORS: best=85, median=325.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=27.495
2021-12-07 16:15:58.568363 | GENERATION: 10 | ERRORS: best=85, median=325.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=26.675
2021-12-07 16:15:59.477220 | GENERATION: 11 | ERRORS: best=85, median=325.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=26.17
2021-12-07 16:16:00.444233 | GENERATION: 12 | ERRORS: best=85, median=415.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=23.89
2021-12-07 16:16:01.257591 | GENERATION: 13 | ERRORS: best=85, median=415.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=22.96
2021-12-07 16:16:02.434569 | GENERATION: 14 | ERRORS: best=85, median=415.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=23.455
2021-12-07 16:16:03.882304 | GENERATION: 15 | ERRORS: best=85, median=415.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=22.42
2021-12-07 16:16:04.943545 | GENERATION: 16 | ERRORS: best=85, median=415.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=20.895
2021-12-07 16:16:06.027542 | GENERATION: 17 | ERRORS: best=85, median=325.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=20.25
2021-12-07 16:16:07.367610 | GENERATION: 18 | ERRORS: best=85, median=325.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=19.58
2021-12-07 16:16:08.470537 | GENERATION: 19 | ERRORS: best=85, median=325.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=18.89
2021-12-07 16:16:09.310356 | GENERATION: 20 | ERRORS: best=85, median=325.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=19.215
2021-12-07 16:16:10.419648 | GENERATION: 21 | ERRORS: best=85, median=325.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=18.635
2021-12-07 16:16:11.582846 | GENERATION: 22 | ERRORS: best=85, median=325.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=18.475
Simplifying genome of length 24 with total error 0.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome to length 14 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fe7e577d100>), InstructionMeta(name='int_lt', code_blocks=0), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fe7e577da60>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_while', code_blocks=1), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fe7e577deb0>), InstructionMeta(name='print_str', code_blocks=0), InstructionMeta(name='bool_dup', code_blocks=0), Closer(), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fe7e577d7c0>), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 1000 int_lt input_0 2000 int_gte exec_while ("large" print_str bool_dup) "small" exec_if (print_str) ())
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:42

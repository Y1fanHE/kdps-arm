Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, push_config=PushConfig(step_limit=300, numeric_magnitude_limit=1000000000000.0, growth_cap=500, collection_size_cap=1000, runtime_limit=10), output_stacks=['stdout'])
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fcdfe7e31f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fcdfe7e3040>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fcdfe7e3820>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fcdfe6f1c40>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fcdfe6f1ac0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fce00bb5760>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fce00bb5760>)]
ERC Generators:
[<function rand_int at 0x7fce00a6df70>]
========================================
Start Run
========================================
2021-12-07 17:13:33.427872 | GENERATION: 1 | ERRORS: best=405, median=4903.0, diversity=0.04 | INDIVIDUALS: n=200, avg_genome_length=56.115
2021-12-07 17:13:35.192101 | GENERATION: 2 | ERRORS: best=230, median=405.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=41.615
2021-12-07 17:13:36.515628 | GENERATION: 3 | ERRORS: best=230, median=405.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=39.215
2021-12-07 17:13:37.882287 | GENERATION: 4 | ERRORS: best=230, median=365.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=39.705
2021-12-07 17:13:39.225176 | GENERATION: 5 | ERRORS: best=230, median=385.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=38.9
2021-12-07 17:13:41.288442 | GENERATION: 6 | ERRORS: best=230, median=365.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=36.635
2021-12-07 17:13:42.425956 | GENERATION: 7 | ERRORS: best=230, median=378.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=35.22
2021-12-07 17:13:43.689576 | GENERATION: 8 | ERRORS: best=230, median=383.5, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=33.94
2021-12-07 17:13:44.990487 | GENERATION: 9 | ERRORS: best=230, median=378.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=32.83
2021-12-07 17:13:46.289697 | GENERATION: 10 | ERRORS: best=230, median=378.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=31.97
2021-12-07 17:13:48.748433 | GENERATION: 11 | ERRORS: best=230, median=378.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=31.01
2021-12-07 17:13:50.089347 | GENERATION: 12 | ERRORS: best=135, median=378.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=29.04
2021-12-07 17:13:51.241977 | GENERATION: 13 | ERRORS: best=135, median=365.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=31.815
2021-12-07 17:13:52.204919 | GENERATION: 14 | ERRORS: best=95, median=365.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=31.06
2021-12-07 17:13:53.349162 | GENERATION: 15 | ERRORS: best=95, median=382.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=34.08
2021-12-07 17:13:54.550675 | GENERATION: 16 | ERRORS: best=95, median=365.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=34.28
2021-12-07 17:13:55.840451 | GENERATION: 17 | ERRORS: best=95, median=365.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=33.485
2021-12-07 17:13:57.229236 | GENERATION: 18 | ERRORS: best=95, median=365.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=32.225
2021-12-07 17:13:58.483158 | GENERATION: 19 | ERRORS: best=95, median=405.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=30.785
2021-12-07 17:13:59.663106 | GENERATION: 20 | ERRORS: best=95, median=365.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=31.305
2021-12-07 17:14:00.615911 | GENERATION: 21 | ERRORS: best=95, median=405.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=30.285
2021-12-07 17:14:01.598500 | GENERATION: 22 | ERRORS: best=95, median=405.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=28.475
2021-12-07 17:14:02.718150 | GENERATION: 23 | ERRORS: best=95, median=365.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=26.04
2021-12-07 17:14:04.133968 | GENERATION: 24 | ERRORS: best=95, median=365.0, diversity=0.145 | INDIVIDUALS: n=200, avg_genome_length=25.365
Simplifying genome of length 24 with total error 0.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 3 to length 18.
Simplified genome by 2 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 2 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fcdfe7ba9d0>), InstructionMeta(name='int_gte', code_blocks=0), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fcdfe7ba4f0>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fcdfe7ba550>), InstructionMeta(name='print_str', code_blocks=0), Closer(), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fcdfe7ba3a0>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 2000 int_gte input_0 1000 int_lt exec_if ("small" print_str) (exec_if ("large" print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:47

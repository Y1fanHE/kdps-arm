Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(push_config=PushConfig(runtime_limit=10, numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500, step_limit=300), output_stacks=['stdout'], arity=1)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f9f838001f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f9f838001c0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f9f83800820>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9f8383e640>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f9f8383e240>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f9f85bde790>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f9f85bde790>)]
ERC Generators:
[<function rand_int at 0x7f9f85a96f70>]
========================================
Start Run
========================================
2021-12-07 19:31:39.503954 | GENERATION: 1 | ERRORS: best=420, median=479.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=62.535
2021-12-07 19:31:41.422811 | GENERATION: 2 | ERRORS: best=265, median=471.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=74.175
2021-12-07 19:31:43.191526 | GENERATION: 3 | ERRORS: best=265, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=71.2
2021-12-07 19:31:44.619016 | GENERATION: 4 | ERRORS: best=265, median=315.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=66.72
2021-12-07 19:31:46.007099 | GENERATION: 5 | ERRORS: best=265, median=420.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=63.74
2021-12-07 19:31:47.634865 | GENERATION: 6 | ERRORS: best=265, median=315.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=61.95
2021-12-07 19:31:49.174758 | GENERATION: 7 | ERRORS: best=265, median=315.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=60.915
2021-12-07 19:31:50.732327 | GENERATION: 8 | ERRORS: best=265, median=420.0, diversity=0.105 | INDIVIDUALS: n=200, avg_genome_length=58.695
2021-12-07 19:31:52.305698 | GENERATION: 9 | ERRORS: best=265, median=315.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=56.095
2021-12-07 19:31:53.861097 | GENERATION: 10 | ERRORS: best=265, median=315.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=57.095
2021-12-07 19:31:55.418612 | GENERATION: 11 | ERRORS: best=265, median=315.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=55.705
2021-12-07 19:31:56.863137 | GENERATION: 12 | ERRORS: best=265, median=315.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=54.98
2021-12-07 19:31:58.473463 | GENERATION: 13 | ERRORS: best=265, median=315.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=56.405
2021-12-07 19:31:59.913968 | GENERATION: 14 | ERRORS: best=80, median=315.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=55.045
2021-12-07 19:32:02.296921 | GENERATION: 15 | ERRORS: best=80, median=420.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=55.825
2021-12-07 19:32:04.879246 | GENERATION: 16 | ERRORS: best=80, median=420.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=54.59
2021-12-07 19:32:07.374218 | GENERATION: 17 | ERRORS: best=80, median=420.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=55.265
2021-12-07 19:32:09.731464 | GENERATION: 18 | ERRORS: best=80, median=420.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=53.83
2021-12-07 19:32:12.272148 | GENERATION: 19 | ERRORS: best=80, median=417.5, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=52.86
2021-12-07 19:32:14.385193 | GENERATION: 20 | ERRORS: best=80, median=420.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=49.905
2021-12-07 19:32:16.585150 | GENERATION: 21 | ERRORS: best=80, median=420.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=51.4
2021-12-07 19:32:18.700221 | GENERATION: 22 | ERRORS: best=80, median=420.0, diversity=0.24 | INDIVIDUALS: n=200, avg_genome_length=48.94
2021-12-07 19:32:20.598840 | GENERATION: 23 | ERRORS: best=80, median=420.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=46.435
2021-12-07 19:32:23.103718 | GENERATION: 24 | ERRORS: best=80, median=420.0, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=48.89
2021-12-07 19:32:25.840972 | GENERATION: 25 | ERRORS: best=80, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=47.205
Simplifying genome of length 48 with total error 0.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 2 to length 44.
Simplified genome by 3 to length 41.
Simplified genome by 2 to length 39.
Simplified genome by 3 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 2 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 2 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 1 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 2 to length 18.
Simplified genome by 2 to length 16.
Simplified genome to length 16 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f9f833634c0>), InstructionMeta(name='int_gte', code_blocks=0), Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f9f83363490>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='bool_shove_dup', code_blocks=0), InstructionMeta(name='int_from_bool', code_blocks=0), InstructionMeta(name='bool_or', code_blocks=0), InstructionMeta(name='exec_when', code_blocks=1), InstructionMeta(name='exec_shove', code_blocks=1), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f9f833630a0>), Closer(), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f9f83363370>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 input_0 2000 int_gte input_0 1000 int_lt bool_shove_dup int_from_bool bool_or exec_when (exec_shove ("small") "large" print_str))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:07

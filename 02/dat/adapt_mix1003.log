Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['stdout'], arity=1, push_config=PushConfig(growth_cap=500, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, step_limit=300, collection_size_cap=1000))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f21fbf991f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f21fbf99100>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f21fbf99850>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f21fc002480>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f21fc002cc0>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f21fe37b790>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f21fe37b790>)]
ERC Generators:
[<function rand_int at 0x7f21fe233f70>]
========================================
Start Run
========================================
2021-12-07 13:37:08.813770 | GENERATION: 1 | ERRORS: best=420, median=420.0, diversity=0.025 | INDIVIDUALS: n=200, avg_genome_length=51.845
2021-12-07 13:37:10.507894 | GENERATION: 2 | ERRORS: best=245, median=420.0, diversity=0.09 | INDIVIDUALS: n=200, avg_genome_length=49.555
2021-12-07 13:37:11.774531 | GENERATION: 3 | ERRORS: best=245, median=420.0, diversity=0.135 | INDIVIDUALS: n=200, avg_genome_length=52.13
2021-12-07 13:37:13.488336 | GENERATION: 4 | ERRORS: best=245, median=420.0, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=49.565
2021-12-07 13:37:14.791485 | GENERATION: 5 | ERRORS: best=245, median=335.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=47.35
2021-12-07 13:37:15.936432 | GENERATION: 6 | ERRORS: best=245, median=335.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=53.235
2021-12-07 13:37:17.010509 | GENERATION: 7 | ERRORS: best=80, median=335.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=51.96
2021-12-07 13:37:18.391112 | GENERATION: 8 | ERRORS: best=80, median=420.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=59.905
2021-12-07 13:37:19.975123 | GENERATION: 9 | ERRORS: best=80, median=420.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=60.37
2021-12-07 13:37:21.541340 | GENERATION: 10 | ERRORS: best=80, median=420.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=59.06
2021-12-07 13:37:24.720520 | GENERATION: 11 | ERRORS: best=80, median=420.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=58.09
2021-12-07 13:37:26.191097 | GENERATION: 12 | ERRORS: best=80, median=420.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=56.575
2021-12-07 13:37:27.765986 | GENERATION: 13 | ERRORS: best=80, median=420.0, diversity=0.27 | INDIVIDUALS: n=200, avg_genome_length=53.1
2021-12-07 13:37:29.337667 | GENERATION: 14 | ERRORS: best=80, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=53.135
2021-12-07 13:37:31.058293 | GENERATION: 15 | ERRORS: best=80, median=420.0, diversity=0.275 | INDIVIDUALS: n=200, avg_genome_length=51.75
2021-12-07 13:37:33.231583 | GENERATION: 16 | ERRORS: best=80, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=49.21
2021-12-07 13:37:34.755168 | GENERATION: 17 | ERRORS: best=80, median=420.0, diversity=0.235 | INDIVIDUALS: n=200, avg_genome_length=49.365
2021-12-07 13:37:36.340816 | GENERATION: 18 | ERRORS: best=80, median=420.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=48.885
2021-12-07 13:37:38.111926 | GENERATION: 19 | ERRORS: best=80, median=420.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=46.575
2021-12-07 13:37:39.487494 | GENERATION: 20 | ERRORS: best=80, median=420.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=45.945
2021-12-07 13:37:40.977438 | GENERATION: 21 | ERRORS: best=80, median=420.0, diversity=0.25 | INDIVIDUALS: n=200, avg_genome_length=45.955
2021-12-07 13:37:42.731140 | GENERATION: 22 | ERRORS: best=80, median=420.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=50.585
2021-12-07 13:37:44.418201 | GENERATION: 23 | ERRORS: best=80, median=420.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=46.24
2021-12-07 13:37:45.846708 | GENERATION: 24 | ERRORS: best=80, median=420.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=40.79
2021-12-07 13:37:47.331275 | GENERATION: 25 | ERRORS: best=80, median=420.0, diversity=0.215 | INDIVIDUALS: n=200, avg_genome_length=39.92
2021-12-07 13:37:48.639871 | GENERATION: 26 | ERRORS: best=80, median=420.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=38.72
Simplifying genome of length 47 with total error 0.
Simplified genome by 3 to length 44.
Simplified genome by 3 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 1 to length 39.
Simplified genome by 1 to length 38.
Simplified genome by 1 to length 37.
Simplified genome by 3 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 3 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 2 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 1 to length 23.
Simplified genome by 3 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome to length 17 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7f21fbcd3ee0>), InstructionMeta(name='int_lt', code_blocks=0), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7f21fbc8e190>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='exec_rot', code_blocks=3), Closer(), Closer(), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7f21fbf6d040>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Closer(), InstructionMeta(name='exec_if', code_blocks=2), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7f21fbf6d100>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 1000 int_lt input_0 2000 int_gte exec_if (exec_rot () () ("large" print_str)) (exec_if ("small" print_str) ()))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:01:01

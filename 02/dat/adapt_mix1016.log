Included 27 edge cases.
Included 73 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=1, output_stacks=['stdout'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, growth_cap=500, runtime_limit=10, step_limit=300, collection_size_cap=1000))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7fa6b4e7a1f0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7fa6b4e7a0d0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7fa6b4e7a490>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6b4efa940>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7fa6b4efa800>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b72ad790>), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b72ad790>)]
ERC Generators:
[<function rand_int at 0x7fa6b7165f70>]
========================================
Start Run
========================================
2021-12-07 18:05:10.589699 | GENERATION: 1 | ERRORS: best=410, median=5084.0, diversity=0.04 | INDIVIDUALS: n=200, avg_genome_length=68.295
2021-12-07 18:05:12.113489 | GENERATION: 2 | ERRORS: best=240, median=410.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=54.49
2021-12-07 18:05:13.751253 | GENERATION: 3 | ERRORS: best=240, median=410.0, diversity=0.13 | INDIVIDUALS: n=200, avg_genome_length=51.355
2021-12-07 18:05:15.264289 | GENERATION: 4 | ERRORS: best=240, median=410.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=49.055
2021-12-07 18:05:16.904441 | GENERATION: 5 | ERRORS: best=240, median=410.0, diversity=0.15 | INDIVIDUALS: n=200, avg_genome_length=48.645
2021-12-07 18:05:18.415708 | GENERATION: 6 | ERRORS: best=240, median=410.0, diversity=0.16 | INDIVIDUALS: n=200, avg_genome_length=47.925
2021-12-07 18:05:19.814812 | GENERATION: 7 | ERRORS: best=240, median=410.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=46.8
2021-12-07 18:05:21.048837 | GENERATION: 8 | ERRORS: best=240, median=350.0, diversity=0.11 | INDIVIDUALS: n=200, avg_genome_length=47.005
2021-12-07 18:05:22.377829 | GENERATION: 9 | ERRORS: best=240, median=350.0, diversity=0.155 | INDIVIDUALS: n=200, avg_genome_length=46.295
2021-12-07 18:05:23.489936 | GENERATION: 10 | ERRORS: best=240, median=275.0, diversity=0.125 | INDIVIDUALS: n=200, avg_genome_length=45.815
2021-12-07 18:05:24.783960 | GENERATION: 11 | ERRORS: best=90, median=343.0, diversity=0.18 | INDIVIDUALS: n=200, avg_genome_length=44.81
2021-12-07 18:05:25.997594 | GENERATION: 12 | ERRORS: best=90, median=260.0, diversity=0.17 | INDIVIDUALS: n=200, avg_genome_length=46.56
2021-12-07 18:05:27.224717 | GENERATION: 13 | ERRORS: best=90, median=350.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=46.21
2021-12-07 18:05:28.322788 | GENERATION: 14 | ERRORS: best=90, median=260.0, diversity=0.195 | INDIVIDUALS: n=200, avg_genome_length=45.495
2021-12-07 18:05:29.727206 | GENERATION: 15 | ERRORS: best=90, median=260.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=45.395
2021-12-07 18:05:30.906071 | GENERATION: 16 | ERRORS: best=90, median=260.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=43.895
2021-12-07 18:05:32.134072 | GENERATION: 17 | ERRORS: best=90, median=350.0, diversity=0.185 | INDIVIDUALS: n=200, avg_genome_length=43.415
2021-12-07 18:05:33.457465 | GENERATION: 18 | ERRORS: best=90, median=350.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=42.245
2021-12-07 18:05:34.592200 | GENERATION: 19 | ERRORS: best=90, median=365.5, diversity=0.225 | INDIVIDUALS: n=200, avg_genome_length=42.98
2021-12-07 18:05:35.651723 | GENERATION: 20 | ERRORS: best=90, median=350.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=42.97
2021-12-07 18:05:36.837217 | GENERATION: 21 | ERRORS: best=90, median=354.0, diversity=0.175 | INDIVIDUALS: n=200, avg_genome_length=42.685
2021-12-07 18:05:38.022668 | GENERATION: 22 | ERRORS: best=65, median=367.0, diversity=0.22 | INDIVIDUALS: n=200, avg_genome_length=42.095
2021-12-07 18:05:39.614781 | GENERATION: 23 | ERRORS: best=65, median=260.0, diversity=0.21 | INDIVIDUALS: n=200, avg_genome_length=42.29
2021-12-07 18:05:41.134079 | GENERATION: 24 | ERRORS: best=65, median=350.0, diversity=0.19 | INDIVIDUALS: n=200, avg_genome_length=41.685
2021-12-07 18:05:42.673131 | GENERATION: 25 | ERRORS: best=65, median=350.0, diversity=0.23 | INDIVIDUALS: n=200, avg_genome_length=41.88
2021-12-07 18:05:44.688183 | GENERATION: 26 | ERRORS: best=65, median=350.0, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=41.725
2021-12-07 18:05:46.182285 | GENERATION: 27 | ERRORS: best=65, median=270.0, diversity=0.205 | INDIVIDUALS: n=200, avg_genome_length=41.495
Simplifying genome of length 37 with total error 0.
Simplified genome by 3 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 2 to length 28.
Simplified genome by 3 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 2 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 1 to length 13.
Simplified genome to length 13 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=0), Literal(value=1000, push_type=<pyshgp.push.types.PushIntType object at 0x7fa6b4a4c730>), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_when', code_blocks=1), Literal(value='small', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b4a4c820>), InstructionMeta(name='print_str', code_blocks=0), Closer(), Input(input_index=0), Literal(value=2000, push_type=<pyshgp.push.types.PushIntType object at 0x7fa6b4a4c130>), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='exec_when', code_blocks=1), Literal(value='large', push_type=<pyshgp.push.types.PushStrType object at 0x7fa6b4a4c490>), InstructionMeta(name='print_str', code_blocks=0)])
	Program:
	 (input_0 1000 int_lt exec_when ("small" print_str) input_0 2000 int_gte exec_when ("large" print_str))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:00:55

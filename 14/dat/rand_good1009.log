Included 32 edge cases.
Included 168 random cases.
Included 200 cases in total.
Finished formatting.
Included 0 edge cases.
Included 2000 random cases.
Included 2000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['int'], arity=1, push_config=PushConfig(collection_size_cap=1000, step_limit=1500, numeric_magnitude_limit=1000000000000.0, growth_cap=500, runtime_limit=10))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7feb2fddee80>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7feb2fdcde50>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (50, 250)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7feaf0d89c10>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7feaf0f8f0c0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7feaf0f61080>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, vector_int_concat, vector_int_conj, vector_int_take, vector_int_subvec, vector_int_first, vector_int_last, vector_int_nth, vector_int_rest, vector_int_but_last, vector_int_length, vector_int_reverse, vector_int_push_all, vector_int_empty_vector, vector_int_contains, vector_int_index_of, vector_int_occurrences_of, vector_int_set_nth, vector_int_replace, vector_int_replace_first, vector_int_remove, vector_int_iterate, print_bool, println_bool, print_int, println_int, print_vector_int, println_vector_int, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, vector_int_pop, vector_int_dup, vector_int_dup_times, vector_int_swap, vector_int_rot, vector_int_flush, vector_int_eq, vector_int_stack_depth, vector_int_yank, vector_int_yank_dup, vector_int_shove, vector_int_shove_dup, vector_int_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[Literal(value=0, push_type=<pyshgp.push.types.PushIntType object at 0x7feb2ff1b520>), Literal(value=1, push_type=<pyshgp.push.types.PushIntType object at 0x7feb2ff1b520>), Literal(value=2, push_type=<pyshgp.push.types.PushIntType object at 0x7feb2ff1b520>)]
ERC Generators:
[<function rand_int at 0x7feaf2070280>]
========================================
Start Run
========================================
2021-12-11 13:03:10.406961 | GENERATION: 1 | ERRORS: best=2015.0, median=200000000.0, diversity=0.115 | INDIVIDUALS: n=200, avg_genome_length=121.52
2021-12-11 13:03:21.411572 | GENERATION: 2 | ERRORS: best=1957.0, median=2281.0, diversity=0.14 | INDIVIDUALS: n=200, avg_genome_length=130.19
2021-12-11 13:03:33.864032 | GENERATION: 3 | ERRORS: best=1963.0, median=5757.0, diversity=0.255 | INDIVIDUALS: n=200, avg_genome_length=125.19
2021-12-11 13:03:46.161474 | GENERATION: 4 | ERRORS: best=1959.0, median=2697.0, diversity=0.405 | INDIVIDUALS: n=200, avg_genome_length=124.29
2021-12-11 13:03:56.978911 | GENERATION: 5 | ERRORS: best=1417.0, median=3553.0, diversity=0.485 | INDIVIDUALS: n=200, avg_genome_length=126.415
2021-12-11 13:04:08.901881 | GENERATION: 6 | ERRORS: best=1406.0, median=4881.0, diversity=0.515 | INDIVIDUALS: n=200, avg_genome_length=126.27
2021-12-11 13:04:21.454416 | GENERATION: 7 | ERRORS: best=1406.0, median=4795.0, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=126.785
2021-12-11 13:04:36.175125 | GENERATION: 8 | ERRORS: best=1395.0, median=11479.0, diversity=0.66 | INDIVIDUALS: n=200, avg_genome_length=124.79
2021-12-11 13:04:49.504783 | GENERATION: 9 | ERRORS: best=1460.0, median=13663.0, diversity=0.665 | INDIVIDUALS: n=200, avg_genome_length=122.205
2021-12-11 13:05:01.343347 | GENERATION: 10 | ERRORS: best=1400.0, median=36367.0, diversity=0.6 | INDIVIDUALS: n=200, avg_genome_length=122.125
2021-12-11 13:05:47.131938 | GENERATION: 11 | ERRORS: best=1399.0, median=3979.0, diversity=0.635 | INDIVIDUALS: n=200, avg_genome_length=123.605
2021-12-11 13:06:02.930964 | GENERATION: 12 | ERRORS: best=1399.0, median=1011059.0, diversity=0.65 | INDIVIDUALS: n=200, avg_genome_length=125.16
2021-12-11 13:06:16.184926 | GENERATION: 13 | ERRORS: best=1402.0, median=3229.0, diversity=0.535 | INDIVIDUALS: n=200, avg_genome_length=124.28
2021-12-11 13:06:30.280131 | GENERATION: 14 | ERRORS: best=1394.0, median=2281.0, diversity=0.565 | INDIVIDUALS: n=200, avg_genome_length=125.265
2021-12-11 13:06:44.242755 | GENERATION: 15 | ERRORS: best=1508.0, median=31479.5, diversity=0.565 | INDIVIDUALS: n=200, avg_genome_length=124.77
2021-12-11 13:06:59.392659 | GENERATION: 16 | ERRORS: best=1520.0, median=116470.5, diversity=0.61 | INDIVIDUALS: n=200, avg_genome_length=123.885
2021-12-11 13:07:14.017955 | GENERATION: 17 | ERRORS: best=1520.0, median=2541.0, diversity=0.59 | INDIVIDUALS: n=200, avg_genome_length=124.565
2021-12-11 13:07:29.559512 | GENERATION: 18 | ERRORS: best=1441.0, median=2589.0, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=123.7
2021-12-11 13:07:46.686964 | GENERATION: 19 | ERRORS: best=1399.0, median=2281.0, diversity=0.63 | INDIVIDUALS: n=200, avg_genome_length=125.055
2021-12-11 13:08:02.220910 | GENERATION: 20 | ERRORS: best=1512.0, median=5010.5, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=126.1
2021-12-11 13:08:18.049545 | GENERATION: 21 | ERRORS: best=1393.0, median=2281.0, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=123.31
Simplifying genome of length 113 with total error 0.0.
Simplified genome by 2 to length 111.
Simplified genome by 2 to length 109.
Simplified genome by 1 to length 108.
Simplified genome by 2 to length 106.
Simplified genome by 1 to length 105.
Simplified genome by 1 to length 104.
Simplified genome by 3 to length 101.
Simplified genome by 1 to length 100.
Simplified genome by 1 to length 99.
Simplified genome by 3 to length 96.
Simplified genome by 1 to length 95.
Simplified genome by 2 to length 93.
Simplified genome by 1 to length 92.
Simplified genome by 2 to length 90.
Simplified genome by 2 to length 88.
Simplified genome by 1 to length 87.
Simplified genome by 3 to length 84.
Simplified genome by 2 to length 82.
Simplified genome by 3 to length 79.
Simplified genome by 2 to length 77.
Simplified genome by 1 to length 76.
Simplified genome by 2 to length 74.
Simplified genome by 2 to length 72.
Simplified genome by 2 to length 70.
Simplified genome by 1 to length 69.
Simplified genome by 1 to length 68.
Simplified genome by 2 to length 66.
Simplified genome by 1 to length 65.
Simplified genome by 2 to length 63.
Simplified genome by 1 to length 62.
Simplified genome by 3 to length 59.
Simplified genome by 1 to length 58.
Simplified genome by 1 to length 57.
Simplified genome by 1 to length 56.
Simplified genome by 1 to length 55.
Simplified genome by 3 to length 52.
Simplified genome by 1 to length 51.
Simplified genome by 1 to length 50.
Simplified genome by 1 to length 49.
Simplified genome by 2 to length 47.
Simplified genome by 3 to length 44.
Simplified genome by 1 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 2 to length 39.
Simplified genome by 3 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 3 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 2 to length 25.
Simplified genome by 3 to length 22.
Simplified genome by 3 to length 19.
Simplified genome by 3 to length 16.
Simplified genome by 3 to length 13.
Simplified genome by 3 to length 10.
Simplified genome by 1 to length 9.
Simplified genome by 1 to length 8.
Simplified genome by 2 to length 6.
Simplified genome to length 6 and total error 0.0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Literal(value=0, push_type=<pyshgp.push.types.PushIntType object at 0x7feaf058d490>), Input(input_index=0), InstructionMeta(name='vector_int_iterate', code_blocks=1), Literal(value=2, push_type=<pyshgp.push.types.PushIntType object at 0x7feaf058d3d0>), InstructionMeta(name='int_mod', code_blocks=0), InstructionMeta(name='int_add', code_blocks=0)])
	Program:
	 (0 input_0 vector_int_iterate (2 int_mod int_add))
	Error vector:
	 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0.]
	Total error:
	 0.0
	Test error:
	 0.0
	Time:
	 00:08:36

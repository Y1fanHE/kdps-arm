Included 22 edge cases.
Included 78 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(arity=3, output_stacks=['bool'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, step_limit=600, growth_cap=500, runtime_limit=10))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f7df33a63d0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f7dff565eb0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (40, 200)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f7df33a6340>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f7dff6e3140>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f7df3da9c80>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_bool at 0x7f7dff56a820>]
========================================
Start Run
========================================
2021-12-07 13:44:00.490038 | GENERATION: 1 | ERRORS: best=20, median=100000000.0, diversity=0.02 | INDIVIDUALS: n=200, avg_genome_length=122.01
2021-12-07 13:44:04.352911 | GENERATION: 2 | ERRORS: best=20, median=20.0, diversity=0.05 | INDIVIDUALS: n=200, avg_genome_length=132.02
2021-12-07 13:44:12.726883 | GENERATION: 3 | ERRORS: best=19, median=24.0, diversity=0.165 | INDIVIDUALS: n=200, avg_genome_length=124.29
2021-12-07 13:44:30.320200 | GENERATION: 4 | ERRORS: best=19, median=29.0, diversity=0.525 | INDIVIDUALS: n=200, avg_genome_length=150.165
2021-12-07 13:44:48.189113 | GENERATION: 5 | ERRORS: best=18, median=75.5, diversity=0.64 | INDIVIDUALS: n=200, avg_genome_length=154.025
2021-12-07 13:45:05.175773 | GENERATION: 6 | ERRORS: best=17, median=56.5, diversity=0.605 | INDIVIDUALS: n=200, avg_genome_length=149.425
2021-12-07 13:45:23.480683 | GENERATION: 7 | ERRORS: best=17, median=45.0, diversity=0.685 | INDIVIDUALS: n=200, avg_genome_length=149.65
2021-12-07 13:45:42.986482 | GENERATION: 8 | ERRORS: best=18, median=57.5, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=156.155
2021-12-07 13:46:01.790275 | GENERATION: 9 | ERRORS: best=18, median=68.5, diversity=0.72 | INDIVIDUALS: n=200, avg_genome_length=158.26
2021-12-07 13:46:20.944757 | GENERATION: 10 | ERRORS: best=17, median=47.5, diversity=0.69 | INDIVIDUALS: n=200, avg_genome_length=164.215
2021-12-07 13:46:39.490807 | GENERATION: 11 | ERRORS: best=17, median=50.0, diversity=0.68 | INDIVIDUALS: n=200, avg_genome_length=164.345
2021-12-07 13:46:59.188840 | GENERATION: 12 | ERRORS: best=17, median=56.0, diversity=0.765 | INDIVIDUALS: n=200, avg_genome_length=166.695
2021-12-07 13:47:19.544532 | GENERATION: 13 | ERRORS: best=15, median=36.5, diversity=0.77 | INDIVIDUALS: n=200, avg_genome_length=169.03
2021-12-07 13:47:40.451046 | GENERATION: 14 | ERRORS: best=15, median=41.5, diversity=0.82 | INDIVIDUALS: n=200, avg_genome_length=173.23
2021-12-07 13:48:01.209392 | GENERATION: 15 | ERRORS: best=14, median=58.0, diversity=0.775 | INDIVIDUALS: n=200, avg_genome_length=172.735
2021-12-07 13:48:21.009175 | GENERATION: 16 | ERRORS: best=13, median=46.5, diversity=0.785 | INDIVIDUALS: n=200, avg_genome_length=172.14
2021-12-07 13:48:41.082040 | GENERATION: 17 | ERRORS: best=11, median=49.5, diversity=0.825 | INDIVIDUALS: n=200, avg_genome_length=173.455
2021-12-07 13:49:01.973718 | GENERATION: 18 | ERRORS: best=11, median=48.5, diversity=0.855 | INDIVIDUALS: n=200, avg_genome_length=174.94
2021-12-07 13:49:22.794657 | GENERATION: 19 | ERRORS: best=10, median=36.0, diversity=0.835 | INDIVIDUALS: n=200, avg_genome_length=175.495
2021-12-07 13:49:43.782472 | GENERATION: 20 | ERRORS: best=10, median=80.0, diversity=0.83 | INDIVIDUALS: n=200, avg_genome_length=174.37
2021-12-07 13:50:03.697595 | GENERATION: 21 | ERRORS: best=10, median=31.0, diversity=0.835 | INDIVIDUALS: n=200, avg_genome_length=174.81
2021-12-07 13:50:24.166718 | GENERATION: 22 | ERRORS: best=10, median=41.5, diversity=0.85 | INDIVIDUALS: n=200, avg_genome_length=175.03
2021-12-07 13:50:43.715839 | GENERATION: 23 | ERRORS: best=13, median=34.5, diversity=0.84 | INDIVIDUALS: n=200, avg_genome_length=175.545
2021-12-07 13:51:04.361017 | GENERATION: 24 | ERRORS: best=14, median=76.5, diversity=0.84 | INDIVIDUALS: n=200, avg_genome_length=175.86
2021-12-07 13:51:25.032620 | GENERATION: 25 | ERRORS: best=12, median=44.5, diversity=0.885 | INDIVIDUALS: n=200, avg_genome_length=175.965
2021-12-07 13:51:45.889857 | GENERATION: 26 | ERRORS: best=12, median=42.0, diversity=0.86 | INDIVIDUALS: n=200, avg_genome_length=176.22
2021-12-07 13:52:06.159837 | GENERATION: 27 | ERRORS: best=11, median=58.5, diversity=0.87 | INDIVIDUALS: n=200, avg_genome_length=175.965
2021-12-07 13:52:26.522157 | GENERATION: 28 | ERRORS: best=11, median=42.0, diversity=0.84 | INDIVIDUALS: n=200, avg_genome_length=176.6
2021-12-07 13:52:47.321495 | GENERATION: 29 | ERRORS: best=9, median=42.5, diversity=0.895 | INDIVIDUALS: n=200, avg_genome_length=177.04
2021-12-07 13:53:08.150312 | GENERATION: 30 | ERRORS: best=9, median=32.0, diversity=0.825 | INDIVIDUALS: n=200, avg_genome_length=176.325
2021-12-07 13:53:28.580002 | GENERATION: 31 | ERRORS: best=8, median=36.0, diversity=0.87 | INDIVIDUALS: n=200, avg_genome_length=176.755
2021-12-07 13:53:49.323309 | GENERATION: 32 | ERRORS: best=9, median=34.0, diversity=0.87 | INDIVIDUALS: n=200, avg_genome_length=176.09
2021-12-07 13:54:08.948212 | GENERATION: 33 | ERRORS: best=9, median=42.5, diversity=0.88 | INDIVIDUALS: n=200, avg_genome_length=176.36
2021-12-07 13:54:29.388266 | GENERATION: 34 | ERRORS: best=8, median=40.5, diversity=0.845 | INDIVIDUALS: n=200, avg_genome_length=175.915
2021-12-07 13:54:49.496100 | GENERATION: 35 | ERRORS: best=8, median=24.0, diversity=0.87 | INDIVIDUALS: n=200, avg_genome_length=174.945
2021-12-07 13:55:09.657370 | GENERATION: 36 | ERRORS: best=9, median=27.0, diversity=0.885 | INDIVIDUALS: n=200, avg_genome_length=174.535
2021-12-07 13:55:29.454253 | GENERATION: 37 | ERRORS: best=9, median=30.0, diversity=0.825 | INDIVIDUALS: n=200, avg_genome_length=174.18
2021-12-07 13:55:48.880602 | GENERATION: 38 | ERRORS: best=7, median=31.5, diversity=0.825 | INDIVIDUALS: n=200, avg_genome_length=174.07
2021-12-07 13:56:08.921909 | GENERATION: 39 | ERRORS: best=7, median=24.0, diversity=0.85 | INDIVIDUALS: n=200, avg_genome_length=173.58
2021-12-07 13:56:29.572880 | GENERATION: 40 | ERRORS: best=2, median=29.5, diversity=0.895 | INDIVIDUALS: n=200, avg_genome_length=173.965
2021-12-07 13:56:46.066275 | GENERATION: 41 | ERRORS: best=2, median=23.0, diversity=0.805 | INDIVIDUALS: n=200, avg_genome_length=173.61
2021-12-07 13:56:59.909319 | GENERATION: 42 | ERRORS: best=1, median=29.5, diversity=0.84 | INDIVIDUALS: n=200, avg_genome_length=173.01
2021-12-07 13:57:14.607937 | GENERATION: 43 | ERRORS: best=1, median=29.5, diversity=0.79 | INDIVIDUALS: n=200, avg_genome_length=173.585
2021-12-07 13:57:29.632951 | GENERATION: 44 | ERRORS: best=1, median=23.0, diversity=0.775 | INDIVIDUALS: n=200, avg_genome_length=173.3
2021-12-07 13:57:44.189340 | GENERATION: 45 | ERRORS: best=1, median=22.0, diversity=0.765 | INDIVIDUALS: n=200, avg_genome_length=173.635
2021-12-07 13:57:59.323573 | GENERATION: 46 | ERRORS: best=1, median=34.0, diversity=0.775 | INDIVIDUALS: n=200, avg_genome_length=173.14
Simplifying genome of length 175 with total error 0.
Simplified genome by 2 to length 173.
Simplified genome by 3 to length 170.
Simplified genome by 1 to length 169.
Simplified genome by 2 to length 167.
Simplified genome by 1 to length 166.
Simplified genome by 1 to length 165.
Simplified genome by 2 to length 163.
Simplified genome by 1 to length 162.
Simplified genome by 1 to length 161.
Simplified genome by 1 to length 160.
Simplified genome by 3 to length 157.
Simplified genome by 1 to length 156.
Simplified genome by 1 to length 155.
Simplified genome by 1 to length 154.
Simplified genome by 1 to length 153.
Simplified genome by 1 to length 152.
Simplified genome by 1 to length 151.
Simplified genome by 1 to length 150.
Simplified genome by 2 to length 148.
Simplified genome by 1 to length 147.
Simplified genome by 1 to length 146.
Simplified genome by 1 to length 145.
Simplified genome by 1 to length 144.
Simplified genome by 1 to length 143.
Simplified genome by 2 to length 141.
Simplified genome by 1 to length 140.
Simplified genome by 1 to length 139.
Simplified genome by 1 to length 138.
Simplified genome by 3 to length 135.
Simplified genome by 1 to length 134.
Simplified genome by 1 to length 133.
Simplified genome by 1 to length 132.
Simplified genome by 2 to length 130.
Simplified genome by 1 to length 129.
Simplified genome by 1 to length 128.
Simplified genome by 1 to length 127.
Simplified genome by 1 to length 126.
Simplified genome by 2 to length 124.
Simplified genome by 1 to length 123.
Simplified genome by 1 to length 122.
Simplified genome by 3 to length 119.
Simplified genome by 1 to length 118.
Simplified genome by 1 to length 117.
Simplified genome by 2 to length 115.
Simplified genome by 1 to length 114.
Simplified genome to length 114 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=0), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='bool_and', code_blocks=0), InstructionMeta(name='int_gt', code_blocks=0), Input(input_index=0), Input(input_index=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), Closer(), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='exec_while', code_blocks=1), InstructionMeta(name='exec_when', code_blocks=1), Closer(), InstructionMeta(name='exec_do_count', code_blocks=1), InstructionMeta(name='int_dec', code_blocks=0), Closer(), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='str_stack_depth', code_blocks=0), InstructionMeta(name='int_yank', code_blocks=0), InstructionMeta(name='int_add', code_blocks=0), InstructionMeta(name='bool_shove', code_blocks=0), InstructionMeta(name='int_yank_dup', code_blocks=0), InstructionMeta(name='exec_shove', code_blocks=1), InstructionMeta(name='str_but_last_n', code_blocks=0), InstructionMeta(name='str_but_last_n', code_blocks=0), InstructionMeta(name='bool_xor', code_blocks=0), InstructionMeta(name='int_stack_depth', code_blocks=0), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_inc', code_blocks=0), Input(input_index=2), InstructionMeta(name='int_dup_times', code_blocks=0), InstructionMeta(name='int_shove', code_blocks=0), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='int_mod', code_blocks=0), Closer(), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='int_from_bool', code_blocks=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), InstructionMeta(name='int_gte', code_blocks=0), InstructionMeta(name='bool_xor', code_blocks=0), Closer(), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='int_mult', code_blocks=0), InstructionMeta(name='exec_shove', code_blocks=1), InstructionMeta(name='int_shove', code_blocks=0), Closer(), InstructionMeta(name='str_but_last', code_blocks=0), InstructionMeta(name='exec_rot', code_blocks=3), InstructionMeta(name='int_pop', code_blocks=0), InstructionMeta(name='str_length', code_blocks=0), Closer(), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_gte', code_blocks=0), Closer(), Input(input_index=2), Closer(), InstructionMeta(name='str_shove', code_blocks=0), InstructionMeta(name='int_max', code_blocks=0), InstructionMeta(name='print_str', code_blocks=0), InstructionMeta(name='bool_flush', code_blocks=0), InstructionMeta(name='int_shove', code_blocks=0), InstructionMeta(name='int_gt', code_blocks=0), InstructionMeta(name='exec_dup_times', code_blocks=1), InstructionMeta(name='bool_yank_dup', code_blocks=0), InstructionMeta(name='println_str', code_blocks=0), Closer(), InstructionMeta(name='bool_dup', code_blocks=0), InstructionMeta(name='exec_do_range', code_blocks=1), InstructionMeta(name='exec_if', code_blocks=2), InstructionMeta(name='int_pop', code_blocks=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), InstructionMeta(name='int_gte', code_blocks=0), Closer(), InstructionMeta(name='str_remove_n_str', code_blocks=0), Literal(value=False, push_type=<pyshgp.push.types.PushBoolType object at 0x7f7df39c6c10>), InstructionMeta(name='int_inc', code_blocks=0), Input(input_index=0), InstructionMeta(name='exec_shove', code_blocks=1), InstructionMeta(name='bool_pop', code_blocks=0), InstructionMeta(name='str_is_empty', code_blocks=0), InstructionMeta(name='exec_do_count', code_blocks=1), Closer(), InstructionMeta(name='exec_pop', code_blocks=1), Closer(), InstructionMeta(name='int_mult', code_blocks=0), InstructionMeta(name='bool_shove_dup', code_blocks=0), InstructionMeta(name='print_int', code_blocks=0), InstructionMeta(name='exec_shove_dup', code_blocks=1), InstructionMeta(name='exec_do_count', code_blocks=1), Input(input_index=2), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_gte', code_blocks=0), Closer(), InstructionMeta(name='noop_open', code_blocks=1), Closer(), InstructionMeta(name='exec_when', code_blocks=1), Closer(), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='bool_stack_depth', code_blocks=0), InstructionMeta(name='str_rest', code_blocks=0), Closer(), Input(input_index=0), InstructionMeta(name='exec_yank_dup', code_blocks=0), InstructionMeta(name='str_flush', code_blocks=0), InstructionMeta(name='bool_shove', code_blocks=0), InstructionMeta(name='str_from_nth_char', code_blocks=0)])
	Program:
	 (input_1 str_length input_0 str_length bool_and int_gt input_0 input_0 exec_stack_depth str_length exec_while (exec_when () exec_do_count (int_dec) int_max int_lt str_stack_depth int_yank int_add bool_shove int_yank_dup exec_shove (str_but_last_n str_but_last_n bool_xor int_stack_depth input_1 str_length int_inc input_2 int_dup_times int_shove int_lt int_mod) int_lt int_from_bool exec_stack_depth int_gte bool_xor) int_lt int_mult exec_shove (int_shove) str_but_last exec_rot (int_pop str_length) (str_length int_gte) (input_2) str_shove int_max print_str bool_flush int_shove int_gt exec_dup_times (bool_yank_dup println_str) bool_dup exec_do_range (exec_if (int_pop exec_stack_depth int_lt exec_stack_depth int_gte) (str_remove_n_str False int_inc input_0 exec_shove (bool_pop str_is_empty exec_do_count () exec_pop () int_mult bool_shove_dup print_int exec_shove_dup (exec_do_count (input_2 str_length input_1 str_length int_gte) noop_open () exec_when () input_1 str_length bool_stack_depth str_rest) input_0 exec_yank_dup str_flush bool_shove str_from_nth_char))))
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 106
	Time:
	 00:16:59

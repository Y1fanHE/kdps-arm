Included 22 edge cases.
Included 78 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['bool'], arity=3, push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, runtime_limit=10, step_limit=600, growth_cap=500))
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f7b488d3910>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f7b54aa96a0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (40, 200)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f7b488d3340>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f7b480681c0>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f7b56c5b580>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_bool at 0x7f7b54ab0820>]
========================================
Start Run
========================================
2021-12-09 10:16:31.906919 | GENERATION: 1 | ERRORS: best=28, median=100000000.0, diversity=0.02 | INDIVIDUALS: n=200, avg_genome_length=140.05
2021-12-09 10:16:38.554273 | GENERATION: 2 | ERRORS: best=28, median=35.0, diversity=0.075 | INDIVIDUALS: n=200, avg_genome_length=122.25
2021-12-09 10:16:44.340738 | GENERATION: 3 | ERRORS: best=26, median=68.5, diversity=0.2 | INDIVIDUALS: n=200, avg_genome_length=123.385
2021-12-09 10:16:49.475305 | GENERATION: 4 | ERRORS: best=26, median=45.0, diversity=0.375 | INDIVIDUALS: n=200, avg_genome_length=117.495
2021-12-09 10:16:56.542790 | GENERATION: 5 | ERRORS: best=26, median=36.5, diversity=0.4 | INDIVIDUALS: n=200, avg_genome_length=138.395
2021-12-09 10:17:03.089855 | GENERATION: 6 | ERRORS: best=26, median=37.0, diversity=0.42 | INDIVIDUALS: n=200, avg_genome_length=142.98
2021-12-09 10:17:09.773957 | GENERATION: 7 | ERRORS: best=24, median=49.5, diversity=0.465 | INDIVIDUALS: n=200, avg_genome_length=143.62
2021-12-09 10:17:15.913082 | GENERATION: 8 | ERRORS: best=24, median=69.0, diversity=0.5 | INDIVIDUALS: n=200, avg_genome_length=143.235
2021-12-09 10:17:21.572764 | GENERATION: 9 | ERRORS: best=24, median=52.0, diversity=0.5 | INDIVIDUALS: n=200, avg_genome_length=140.865
2021-12-09 10:17:27.544215 | GENERATION: 10 | ERRORS: best=24, median=51.0, diversity=0.5 | INDIVIDUALS: n=200, avg_genome_length=133.42
2021-12-09 10:17:33.426139 | GENERATION: 11 | ERRORS: best=24, median=43.5, diversity=0.55 | INDIVIDUALS: n=200, avg_genome_length=126.77
2021-12-09 10:17:38.914788 | GENERATION: 12 | ERRORS: best=18, median=50.0, diversity=0.55 | INDIVIDUALS: n=200, avg_genome_length=126.83
2021-12-09 10:17:44.155094 | GENERATION: 13 | ERRORS: best=12, median=46.5, diversity=0.665 | INDIVIDUALS: n=200, avg_genome_length=122.725
2021-12-09 10:17:48.668806 | GENERATION: 14 | ERRORS: best=12, median=43.5, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=108.505
2021-12-09 10:17:53.895890 | GENERATION: 15 | ERRORS: best=12, median=43.5, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=109.035
2021-12-09 10:17:58.322217 | GENERATION: 16 | ERRORS: best=12, median=43.5, diversity=0.665 | INDIVIDUALS: n=200, avg_genome_length=103.405
2021-12-09 10:18:03.048408 | GENERATION: 17 | ERRORS: best=12, median=37.0, diversity=0.685 | INDIVIDUALS: n=200, avg_genome_length=106.325
2021-12-09 10:18:08.245317 | GENERATION: 18 | ERRORS: best=12, median=41.0, diversity=0.635 | INDIVIDUALS: n=200, avg_genome_length=101.92
2021-12-09 10:18:13.245540 | GENERATION: 19 | ERRORS: best=12, median=43.5, diversity=0.66 | INDIVIDUALS: n=200, avg_genome_length=96.465
2021-12-09 10:18:17.999578 | GENERATION: 20 | ERRORS: best=12, median=45.5, diversity=0.57 | INDIVIDUALS: n=200, avg_genome_length=99.875
2021-12-09 10:18:22.476161 | GENERATION: 21 | ERRORS: best=12, median=38.0, diversity=0.705 | INDIVIDUALS: n=200, avg_genome_length=94.825
2021-12-09 10:18:27.015972 | GENERATION: 22 | ERRORS: best=12, median=39.0, diversity=0.655 | INDIVIDUALS: n=200, avg_genome_length=89.56
2021-12-09 10:18:31.893547 | GENERATION: 23 | ERRORS: best=12, median=37.0, diversity=0.68 | INDIVIDUALS: n=200, avg_genome_length=89.505
2021-12-09 10:18:36.509541 | GENERATION: 24 | ERRORS: best=12, median=40.5, diversity=0.65 | INDIVIDUALS: n=200, avg_genome_length=85.075
2021-12-09 10:18:40.556262 | GENERATION: 25 | ERRORS: best=12, median=40.5, diversity=0.56 | INDIVIDUALS: n=200, avg_genome_length=83.705
2021-12-09 10:18:44.816361 | GENERATION: 26 | ERRORS: best=12, median=43.0, diversity=0.57 | INDIVIDUALS: n=200, avg_genome_length=82.795
2021-12-09 10:18:49.046101 | GENERATION: 27 | ERRORS: best=2, median=36.0, diversity=0.555 | INDIVIDUALS: n=200, avg_genome_length=83.72
2021-12-09 10:18:52.723930 | GENERATION: 28 | ERRORS: best=2, median=35.0, diversity=0.55 | INDIVIDUALS: n=200, avg_genome_length=85.43
2021-12-09 10:18:56.911476 | GENERATION: 29 | ERRORS: best=2, median=32.0, diversity=0.52 | INDIVIDUALS: n=200, avg_genome_length=85.4
2021-12-09 10:19:01.043665 | GENERATION: 30 | ERRORS: best=2, median=35.0, diversity=0.515 | INDIVIDUALS: n=200, avg_genome_length=85.595
2021-12-09 10:19:04.785005 | GENERATION: 31 | ERRORS: best=2, median=41.0, diversity=0.55 | INDIVIDUALS: n=200, avg_genome_length=84.79
Simplifying genome of length 88 with total error 0.
Simplified genome by 3 to length 85.
Simplified genome by 2 to length 83.
Simplified genome by 2 to length 81.
Simplified genome by 2 to length 79.
Simplified genome by 2 to length 77.
Simplified genome by 3 to length 74.
Simplified genome by 2 to length 72.
Simplified genome by 3 to length 69.
Simplified genome by 1 to length 68.
Simplified genome by 1 to length 67.
Simplified genome by 1 to length 66.
Simplified genome by 1 to length 65.
Simplified genome by 1 to length 64.
Simplified genome by 2 to length 62.
Simplified genome by 1 to length 61.
Simplified genome by 1 to length 60.
Simplified genome by 1 to length 59.
Simplified genome by 3 to length 56.
Simplified genome by 2 to length 54.
Simplified genome by 3 to length 51.
Simplified genome by 1 to length 50.
Simplified genome by 2 to length 48.
Simplified genome by 2 to length 46.
Simplified genome by 1 to length 45.
Simplified genome by 2 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 2 to length 39.
Simplified genome by 1 to length 38.
Simplified genome by 2 to length 36.
Simplified genome by 2 to length 34.
Simplified genome by 2 to length 32.
Simplified genome by 2 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 1 to length 28.
Simplified genome by 1 to length 27.
Simplified genome by 1 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 2 to length 22.
Simplified genome by 1 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 2 to length 15.
Simplified genome by 1 to length 14.
Simplified genome by 3 to length 11.
Simplified genome to length 11 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=0), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_gt', code_blocks=0), Input(input_index=2), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='bool_and', code_blocks=0)])
	Program:
	 (input_1 str_length input_0 str_length int_gt input_2 input_1 str_length str_length int_lt bool_and)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:02:59

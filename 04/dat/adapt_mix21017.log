Included 22 edge cases.
Included 78 random cases.
Included 100 cases in total.
Finished formatting.
Included 0 edge cases.
Included 1000 random cases.
Included 1000 cases in total.
Finished formatting.
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['bool'], push_config=PushConfig(numeric_magnitude_limit=1000000000000.0, collection_size_cap=1000, growth_cap=500, runtime_limit=10, step_limit=600), arity=3)
evaluator: <pyshgp.gp.evaluation.DatasetEvaluator object at 0x7f859f7294c0>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x7f85ab902ee0>
population_size: 200
max_generations: 300
error_threshold: 0.0
initial_genome_size: (40, 200)
simplification_steps: 500
parallel_context: <pyshgp.gp.search.ParallelContext object at 0x7f859f729760>
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x7f85a00a8500>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x7f85a00a8b00>
Instructions:
int_add, int_sub, int_mult, int_div, int_mod, int_min, int_max, int_inc, int_dec, int_lt, int_lte, int_gt, int_gte, int_from_bool, str_concat, str_insert_str, str_from_first_char, str_from_last_char, str_from_nth_char, str_contains_str, str_index_of_str, str_split_on_str, str_replace_first_str, str_replace_n_str, str_replace_all_str, str_remove_first_str, str_remove_n_str, str_remove_all_str, str_occurrences_of_str, str_reverse, str_head, str_tail, str_rest, str_but_last, str_drop, str_but_last_n, str_length, str_make_empty, str_is_empty_string, str_remove_nth, str_strip_whitespace, str_from_bool, str_from_int, bool_and, bool_or, bool_not, bool_xor, bool_invert_first_then_and, bool_second_first_then_and, bool_from_int, noop, noop_open, exec_do_range, exec_do_count, exec_while, exec_do_while, exec_if, exec_when, print_bool, println_bool, print_int, println_int, print_str, println_str, print_exec, println_exec, bool_pop, bool_dup, bool_dup_times, bool_swap, bool_rot, bool_flush, bool_eq, bool_stack_depth, bool_yank, bool_yank_dup, bool_shove, bool_shove_dup, bool_is_empty, int_pop, int_dup, int_dup_times, int_swap, int_rot, int_flush, int_eq, int_stack_depth, int_yank, int_yank_dup, int_shove, int_shove_dup, int_is_empty, str_pop, str_dup, str_dup_times, str_swap, str_rot, str_flush, str_eq, str_stack_depth, str_yank, str_yank_dup, str_shove, str_shove_dup, str_is_empty, exec_pop, exec_dup, exec_dup_times, exec_swap, exec_rot, exec_flush, exec_eq, exec_stack_depth, exec_yank, exec_yank_dup, exec_shove, exec_shove_dup, exec_is_empty
Literals:
[]
ERC Generators:
[<function rand_bool at 0x7f85ab907820>]
========================================
Start Run
========================================
2021-12-09 18:28:04.185896 | GENERATION: 1 | ERRORS: best=25, median=100000000.0, diversity=0.02 | INDIVIDUALS: n=200, avg_genome_length=109.56
2021-12-09 18:28:09.077812 | GENERATION: 2 | ERRORS: best=25, median=25.0, diversity=0.035 | INDIVIDUALS: n=200, avg_genome_length=105.03
2021-12-09 18:28:13.854677 | GENERATION: 3 | ERRORS: best=25, median=52.5, diversity=0.12 | INDIVIDUALS: n=200, avg_genome_length=111.065
2021-12-09 18:28:19.780125 | GENERATION: 4 | ERRORS: best=25, median=47.0, diversity=0.245 | INDIVIDUALS: n=200, avg_genome_length=115.625
2021-12-09 18:28:25.753396 | GENERATION: 5 | ERRORS: best=25, median=55.0, diversity=0.28 | INDIVIDUALS: n=200, avg_genome_length=98.645
2021-12-09 18:28:34.760946 | GENERATION: 6 | ERRORS: best=24, median=50.5, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=101.445
2021-12-09 18:28:45.681867 | GENERATION: 7 | ERRORS: best=24, median=48.5, diversity=0.585 | INDIVIDUALS: n=200, avg_genome_length=110.77
2021-12-09 18:28:56.729531 | GENERATION: 8 | ERRORS: best=24, median=43.0, diversity=0.515 | INDIVIDUALS: n=200, avg_genome_length=106.5
2021-12-09 18:29:05.998332 | GENERATION: 9 | ERRORS: best=24, median=55.0, diversity=0.47 | INDIVIDUALS: n=200, avg_genome_length=106.96
2021-12-09 18:29:15.745880 | GENERATION: 10 | ERRORS: best=22, median=31.0, diversity=0.485 | INDIVIDUALS: n=200, avg_genome_length=110.195
2021-12-09 18:29:25.875613 | GENERATION: 11 | ERRORS: best=23, median=40.5, diversity=0.525 | INDIVIDUALS: n=200, avg_genome_length=107.055
2021-12-09 18:29:35.194073 | GENERATION: 12 | ERRORS: best=22, median=34.5, diversity=0.45 | INDIVIDUALS: n=200, avg_genome_length=102.775
2021-12-09 18:29:44.953009 | GENERATION: 13 | ERRORS: best=23, median=54.0, diversity=0.475 | INDIVIDUALS: n=200, avg_genome_length=102.11
2021-12-09 18:29:55.625286 | GENERATION: 14 | ERRORS: best=23, median=37.5, diversity=0.54 | INDIVIDUALS: n=200, avg_genome_length=106.04
2021-12-09 18:30:07.831790 | GENERATION: 15 | ERRORS: best=19, median=43.5, diversity=0.65 | INDIVIDUALS: n=200, avg_genome_length=105.4
2021-12-09 18:30:18.871810 | GENERATION: 16 | ERRORS: best=19, median=31.0, diversity=0.645 | INDIVIDUALS: n=200, avg_genome_length=100.15
2021-12-09 18:30:30.319221 | GENERATION: 17 | ERRORS: best=15, median=33.0, diversity=0.62 | INDIVIDUALS: n=200, avg_genome_length=99.37
2021-12-09 18:30:40.075908 | GENERATION: 18 | ERRORS: best=6, median=29.0, diversity=0.58 | INDIVIDUALS: n=200, avg_genome_length=91.25
2021-12-09 18:30:45.936199 | GENERATION: 19 | ERRORS: best=6, median=27.0, diversity=0.545 | INDIVIDUALS: n=200, avg_genome_length=73.205
2021-12-09 18:30:50.848146 | GENERATION: 20 | ERRORS: best=1, median=25.0, diversity=0.505 | INDIVIDUALS: n=200, avg_genome_length=67.455
Simplifying genome of length 65 with total error 0.
Simplified genome by 1 to length 64.
Simplified genome by 2 to length 62.
Simplified genome by 1 to length 61.
Simplified genome by 1 to length 60.
Simplified genome by 1 to length 59.
Simplified genome by 1 to length 58.
Simplified genome by 1 to length 57.
Simplified genome by 2 to length 55.
Simplified genome by 2 to length 53.
Simplified genome by 1 to length 52.
Simplified genome by 3 to length 49.
Simplified genome by 1 to length 48.
Simplified genome by 1 to length 47.
Simplified genome by 1 to length 46.
Simplified genome by 1 to length 45.
Simplified genome by 1 to length 44.
Simplified genome by 1 to length 43.
Simplified genome by 2 to length 41.
Simplified genome by 1 to length 40.
Simplified genome by 1 to length 39.
Simplified genome by 3 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 1 to length 32.
Simplified genome by 1 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 2 to length 27.
Simplified genome by 1 to length 26.
Simplified genome to length 26 and total error 0.
========================================
End Run
========================================
Solution found.
Best Seen Individual
	Genome:
	 pvector([Input(input_index=2), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), InstructionMeta(name='exec_shove', code_blocks=1), InstructionMeta(name='int_lt', code_blocks=0), InstructionMeta(name='bool_and', code_blocks=0), Closer(), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=1), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=2), InstructionMeta(name='str_length', code_blocks=0), Input(input_index=0), InstructionMeta(name='int_dup_times', code_blocks=0), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='int_gt', code_blocks=0), InstructionMeta(name='int_dec', code_blocks=0), InstructionMeta(name='int_yank_dup', code_blocks=0), Input(input_index=2), InstructionMeta(name='str_length', code_blocks=0), InstructionMeta(name='exec_stack_depth', code_blocks=0), InstructionMeta(name='int_add', code_blocks=0), InstructionMeta(name='println_exec', code_blocks=0), InstructionMeta(name='bool_shove_dup', code_blocks=0), InstructionMeta(name='int_yank_dup', code_blocks=0)])
	Program:
	 (input_2 str_length exec_stack_depth exec_shove (int_lt bool_and) input_1 str_length input_1 str_length input_2 str_length input_0 int_dup_times str_length int_gt int_dec int_yank_dup input_2 str_length exec_stack_depth int_add println_exec bool_shove_dup int_yank_dup)
	Error vector:
	 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	Total error:
	 0
	Test error:
	 0
	Time:
	 00:03:23
